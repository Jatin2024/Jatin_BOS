{"version":3,"file":"static/js/248.a32112b2.chunk.js","mappings":"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","sources":["components/DragAndDrop/DragAndDrop.jsx","hooks/useBOSWidget.js","hooks/useBOSDropableArea.js","pages/BOSWidget/MassUpdateDropdown.jsx","pages/BOSWidget/BOSWidgetToolbarNativeCta.jsx","pages/BOSWidget/BOSWidget.jsx","pages/BOSWidget/BOSdataHelpers.js","pages/BOSWidget/WidgetLifecycle.jsx","pages/BOSWidget/bosIndex.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport useDroppableArea from \"../../hooks/useDroppableArea\";\r\nimport \"./DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst DragAndDropComponent = () => {\r\n  const {  handleDrop } = useDroppableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      console.log(\"Selected objects:\", selectedObjects);\r\n      console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"droppable-container mt-4\"\r\n      >\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import { useDispatch } from \"react-redux\";\r\n\r\nimport {\r\n  setParentDetailsLoading,\r\n  setSpecDocument,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nimport { callEnoviaWebService, loadWAFData, fetchData } from \"../utils/helpers\";\r\n\r\nconst useBOSWidget = () => {\r\n  const { showErrorToast } = useToast();\r\n  const dispatch = useDispatch();\r\n\r\n  let email = \"\";\r\n  let securityContext1 = \"\";\r\n  initWidget((widget) => {\r\n    securityContext1 = widget.getValue(\"Credentials\");\r\n    email = widget.getValue(\"email\");\r\n  });\r\n\r\n  console.log(\"Email in useBOSWidget:\", email);\r\n  console.log(\"Security Context in useBOSWidget:\", securityContext1);\r\n\r\n  const handleBOSWidget = async (\r\n    collabSpace,\r\n    state,\r\n    objectId,\r\n    type,\r\n    parentName,\r\n    parentRevision\r\n  ) => {\r\n    try {\r\n      console.log(\"Object id is:\", objectId);\r\n      console.log(\"Object type is:\", type);\r\n      dispatch(setParentDetailsLoading(true));\r\n\r\n      const headers = await fetchCsrfToken(securityContext1);\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      console.log(\"[useBOSWidget] CSRF Headers:\", headers);\r\n\r\n      // Step 1: Call Enovia Web Service\r\n      let baseURL = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/documents/parentId/${objectId}?parentRelName=SpecificationDocument`;\r\n\r\n      let parentDirection = type === \"Document\" ? \"to\" : \"from\";\r\n\r\n      let urlObjWAF = `${baseURL}&parentDirection=${parentDirection}`;\r\n      let ChildObject = await callEnoviaWebService(\r\n        \"GET\",\r\n        urlObjWAF,\r\n        \"\",\r\n        headers\r\n      );\r\n      console.log(\"SpecDetails Response:\", ChildObject);\r\n\r\n      if (\r\n        ChildObject &&\r\n        ChildObject.status &&\r\n        ChildObject.output.data.length > 0\r\n      ) {\r\n        let ChildObjectDocument = ChildObject.output.data.map((sSpec) => ({\r\n          id: sSpec.id,\r\n          title:\r\n            sSpec.dataelements.title && sSpec.dataelements.title.trim() !== \"\"\r\n              ? sSpec.dataelements.title\r\n              : sSpec.dataelements.secondaryTitle,\r\n          revision: sSpec.dataelements.revision,\r\n          state: sSpec.dataelements.stateNLS,\r\n          name: sSpec.dataelements.name,\r\n        }));\r\n\r\n        console.log(\r\n          \"[useBOSWidget] Extracted Spec Documents:\",\r\n          ChildObjectDocument\r\n        );\r\n        // if type is Document and then iterate ovet the\r\n        if (type === \"Document\") {\r\n          const revisionBody = {\r\n            data: [],\r\n          };\r\n          ChildObjectDocument.forEach((child) => {\r\n            const body = {\r\n              id: child.id,\r\n              identifier: child.id,\r\n              type: \"VPMReference\",\r\n              source:\r\n                \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia\",\r\n              relativePath: `/resources/v1/modeler/dseng/dseng:EngItem/${child.id}`,\r\n            };\r\n            revisionBody.data.push(body);\r\n          });\r\n          const RevisionUrl =\r\n            \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/version/getGraph\";\r\n          const response = await callEnoviaWebService(\r\n            \"POST\",\r\n            RevisionUrl,\r\n            revisionBody,\r\n            headers\r\n          );\r\n          console.log(\"response is:\", response);\r\n          if (response.status && response.output.results) {\r\n            console.log(\"Response result is:\", response.results);\r\n            response.output.results.forEach((item) => {\r\n              // Find the latest version based on the 'revision' key\r\n              const latestVersion = item.versions.reduce((latest, current) => {\r\n                return current.revision > latest.revision ? current : latest;\r\n              });\r\n\r\n              // Loop through childObjectDocument and update 'isLatest' key\r\n              ChildObjectDocument = ChildObjectDocument.map((doc) => ({\r\n                ...doc,\r\n                isLatestRevision:\r\n                  doc.id === latestVersion.id ? \"TRUE\" : \"FALSE\",\r\n              }));\r\n            });\r\n          }\r\n\r\n          console.log(\"ChildObjectDocument is:\", ChildObjectDocument);\r\n        }\r\n        let requestBody;\r\n        let getUrl;\r\n        if (type === \"Document\") {\r\n          getUrl =\r\n            \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/bosAttribute/getLatestSpecItemDetails\";\r\n          requestBody = {\r\n            SpecName: parentName, // Replace with actual SpecName if dynamic\r\n            SpecRevision: parentRevision, // Replace with actual SpecRevision if dynamic\r\n            Items: ChildObjectDocument.map((obj) => ({\r\n              ItemName: obj.name, // Replace dynamically if needed\r\n              ItemRevision: obj.revision,\r\n            })),\r\n          };\r\n        } else {\r\n          getUrl =\r\n            \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/bosAttribute/getLatestItemSpecDetails\";\r\n          requestBody = {\r\n            ItemName: parentName, // Replace with actual ItemName if dynamic\r\n            ItemRevision: parentRevision, // Replace with actual revision if dynamic\r\n            Specifications: ChildObjectDocument.map((obj) => ({\r\n              SpecName: obj.name,\r\n              SpecRevision: obj.revision,\r\n            })),\r\n          };\r\n        }\r\n\r\n        console.log(\"Requested Body is:\", requestBody);\r\n\r\n        const response = await fetchData(\"POST\", getUrl, requestBody);\r\n\r\n        console.log(\"the response from node API is:\", response);\r\n\r\n        let mergedData = [];\r\n        if (response?.data?.data?.Specifications) {\r\n          // **Case 1: API Response Contains \"Specifications\"**\r\n          response.data.data.Specifications.forEach((spec) => {\r\n            let matchingDoc = ChildObjectDocument.find(\r\n              (obj) =>\r\n                obj.name === spec.SpecName && obj.revision === spec.SpecRevision\r\n            );\r\n\r\n            mergedData.push({\r\n              childState: matchingDoc?.state || \"\",\r\n              childTitle: matchingDoc?.title || \"\",\r\n              childLatest: matchingDoc?.isLatestRevision || \"FALSE\",\r\n              childName: spec.SpecName,\r\n              childRevision: spec.SpecRevision,\r\n              PrintOnPurchaseOrderRequired: spec.PrintOnPurchaseOrderRequired,\r\n              PrintOnWorkOrderRequired: spec.PrintOnWorkOrderRequired,\r\n              WorkOrderDocumentRequired: spec.WorkOrderDocumentRequired,\r\n              PrintOnReportOrderRequired: spec.PrintOnReportOrderRequired,\r\n              \"SAP/JDE\": spec[\"SAP/JDE\"],\r\n            });\r\n          });\r\n        } else if (response?.data?.data?.Items) {\r\n          // get all the id's\r\n\r\n          // **Case 2: API Response Contains \"Items\"**\r\n          response.data.data.Items.forEach((item) => {\r\n            let matchingDoc = ChildObjectDocument.find(\r\n              (doc) =>\r\n                doc.name === item.ItemName && doc.revision === item.ItemRevision\r\n            );\r\n\r\n            mergedData.push({\r\n              childState: matchingDoc?.state || \"\",\r\n              childTitle: matchingDoc?.title || \"\",\r\n              childName: item.ItemName,\r\n              childRevision: item.ItemRevision,\r\n              childLatest: matchingDoc?.isLatestRevision || \"FALSE\",\r\n              PrintOnPurchaseOrderRequired: item.PrintOnPurchaseOrderRequired,\r\n              PrintOnWorkOrderRequired: item.PrintOnWorkOrderRequired,\r\n              WorkOrderDocumentRequired: item.WorkOrderDocumentRequired,\r\n              PrintOnReportOrderRequired: item.PrintOnReportOrderRequired,\r\n              \"SAP/JDE\": item[\"SAP/JDE\"],\r\n            });\r\n          });\r\n        } else {\r\n          console.warn(\"[useBOSWidget] Unexpected API response format.\");\r\n        }\r\n        console.log(\r\n          \"[useBOSWidget] Final Merged Data for Dispatch:\",\r\n          mergedData\r\n        );\r\n\r\n        dispatch(setSpecDocument(mergedData));\r\n        // You can now dispatch or return this data as needed\r\n      } else {\r\n        console.warn(\"[useBOSWidget] No connected childs.\");\r\n        dispatch(setSpecDocument([]));\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[useBOSWidget] Error:\", error);\r\n      throw error; // Let the caller handle the error\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // Ensure loading state is reset\r\n    }\r\n  };\r\n\r\n  return { handleBOSWidget };\r\n};\r\n\r\nexport default useBOSWidget;\r\n","import { useCallback, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setDroppedObjectData } from \"../store/droppedObjectSlice\";\r\nimport { setIsDropped as setIsDroppedAction } from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport usePlantAssignment from \"./usePlantAssignment\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  getDroppedObjectDetails,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\nimport useBOSWidget from \"./useBOSWidget\";\r\n\r\nconst useBOSDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handleBOSWidget } = useBOSWidget();\r\n\r\n  // const [csrfHeaders, setCsrfHeaders] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n\r\n        // const cardownerResult = await fetchCardOwnerDetailsService({\r\n        //   dataItems,\r\n        //   headers,\r\n        // });\r\n\r\n        if (objectDetailsResult.success) {\r\n          // Merge the data from both services\r\n          // const combineData = {\r\n          //   cardData: objectDetailsResult.data.cardData,\r\n          //   ownerData: cardownerResult.data.ownerData,\r\n          // };\r\n\r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n            })\r\n          );\r\n\r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n          dispatch(setIsDroppedAction(true));\r\n\r\n          // call usePlantAssignment after successfully fetching object details\r\n          if (objectDetailsResult) {\r\n            await handleBOSWidget(\r\n              draggedObjectData[\"Collaborative Space\"],\r\n              draggedObjectData[\"Maturity State\"],\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType,\r\n              draggedObjectData.Name,\r\n              draggedObjectData[\"Dropped Revision\"]\r\n            );\r\n          }\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    },\r\n    [dispatch, handleBOSWidget]\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      setLoading(true); // Start loading state\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        setLoading(false);\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    dispatch(setIsDroppedAction(false));\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n\r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n\r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default useBOSDropableArea;\r\n","import React, { useState } from \"react\";\r\n\r\nconst MassUpdateDropdown = ({\r\n  editableColumns,\r\n  selectedRows,\r\n  onApplyUpdate,\r\n  valueOptions,\r\n}) => {\r\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\r\n  const [selectedValue, setSelectedValue] = useState(\"\");\r\n\r\n  // Temporary value options (Can be made dynamic later)\r\n\r\n  const handleApplyUpdate = (applyToAll) => {\r\n    if (!selectedColumn || !selectedValue) {\r\n      alert(\"Please select a column and a value.\");\r\n      return;\r\n    }\r\n\r\n    onApplyUpdate(\r\n      selectedColumn,\r\n      selectedValue,\r\n      applyToAll ? \"all\" : \"selected\"\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"dropdown\">\r\n      <button\r\n        className=\"btn btn-outline-primary btn-lg m-2 dropdown-toggle\"\r\n        type=\"button\"\r\n        data-bs-toggle=\"dropdown\"\r\n      >\r\n        Mass Update\r\n      </button>\r\n      <div className=\"dropdown-menu p-3 \" style={{ width: \"250px\" }}>\r\n        <label>Select Column:</label>\r\n        <select\r\n          className=\"form-select mb-2\"\r\n          onChange={(e) => setSelectedColumn(e.target.value)}\r\n          value={selectedColumn}\r\n        >\r\n          <option value=\"\">-- Select Column --</option>\r\n          {editableColumns.map((col) => (\r\n            <option key={col} value={col}>\r\n              {col}\r\n            </option>\r\n          ))}\r\n        </select>\r\n\r\n        <label>Select Value:</label>\r\n        <select\r\n          className=\"form-select mb-2\"\r\n          value={selectedValue}\r\n          onChange={(e) => setSelectedValue(e.target.value)}\r\n          disabled={!selectedColumn}\r\n        >\r\n          <option value=\"\">-- Select Value --</option>\r\n          {valueOptions.map((val) => (\r\n            <option key={val} value={val}>\r\n              {val}\r\n            </option>\r\n          ))}\r\n        </select>\r\n\r\n        <button\r\n          className=\"btn btn-outline-success me-2 mb-2\"\r\n          onClick={() => handleApplyUpdate(false)}\r\n          disabled={!selectedRows.length}\r\n          style={{ cursor: !selectedRows.length ? \"not-allowed\" : \"pointer\" }}\r\n        >\r\n          Apply to Selected\r\n        </button>\r\n        <button\r\n          className=\"btn btn-outline-primary\"\r\n          onClick={() => handleApplyUpdate(true)}\r\n        >\r\n          Apply to All\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MassUpdateDropdown;\r\n","import Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_SAVEPRODUCT_RELEASED_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport MassUpdateDropdown from \"./MassUpdateDropdown\";\r\n\r\nconst BOSWidgetToolbarNativeCta = ({ onSave, state, selectedRows }) => {\r\n  const { showWarningToast } = useToast();\r\n\r\n  const handleSaveClick = () => {\r\n    if (onSave) {\r\n      onSave();\r\n    } else if (state === \"RELEASED\") {\r\n      showWarningToast(MSG_SAVEPRODUCT_RELEASED_ERROR);\r\n    } else {\r\n      showWarningToast(MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR);\r\n    }\r\n    // When save button is clicked, call onSave passed as prop\r\n    // onSave is passed with tableData from parent\r\n  };\r\n\r\n  return (\r\n    <div className=\"d-flex cta-absolute\">\r\n      <button\r\n        className=\"btn btn-outline-success btn-lg m-2\"\r\n        onClick={handleSaveClick}\r\n      >\r\n        Save\r\n      </button>\r\n      <MassUpdateDropdown\r\n        editableColumns={[\r\n          \"Print On Purchase Order Required\",\r\n          \"Print On Work Order Required\",\r\n          \"Work Order Document Required\",\r\n          \"Print On report Order Required\",\r\n          \"SAP/JDE\",\r\n        ]}\r\n        selectedRows={selectedRows} // Selected row IDs from table\r\n        onApplyUpdate={(column, value, scope) => {\r\n          if (scope === \"selected\") {\r\n            // updateSelectedRows(column, value);\r\n            console.log(\"the selected rows are: \", selectedRows);\r\n            console.log(\"to update selected rows columns:\", column);\r\n            console.log(\"to update selected rows value:\", value);\r\n          } else {\r\n            // updateAllRows(column, value);\r\n            console.log(\"to update all rows columns:\", column);\r\n            console.log(\"to update all rows value:\", value);\r\n          }\r\n        }}\r\n        valueOptions={[\"Yes\", \"No\"]}\r\n      ></MassUpdateDropdown>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BOSWidgetToolbarNativeCta;\r\n","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport DragAndDropComponent from \"../../components/DragAndDrop/DragAndDrop\";\r\nimport { Image } from \"react-bootstrap\";\r\nimport \"./BOSWidget.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport { getCardData, getTableData, tableColumns } from \"./BOSdataHelpers\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { saveData } from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport useBOSDropableArea from \"../../hooks/useBOSDropableArea\";\r\nimport BOSWidgetToolbarNativeCta from \"./BOSWidgetToolbarNativeCta\";\r\nimport { fetchData } from \"../../utils/helpers\";\r\n\r\nconst BOSWidget = () => {\r\n  const { initializeDroppableArea, loading } = useBOSDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [specData, setSpecData] = useState([]);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n\r\n  useEffect(() => {\r\n    if (specData.length) {\r\n      setTableData(specData.map((item) => ({ ...item, changedCells: {} })));\r\n    }\r\n  }, [specData]);\r\n\r\n  const handleSave = async () => {\r\n    console.log(\"Table Data is:\", tableData);\r\n    setScreenLoader(true);\r\n    console.log(\"Type of Parent:\", type);\r\n    let parentData = [];\r\n    let ChildNameKey;\r\n    let ChildRevKey;\r\n    if (type === \"Document\") {\r\n      parentData = {\r\n        SpecName: droppedObjectData.cardData.Name,\r\n        SpecRevision: droppedObjectData.cardData[\"Dropped Revision\"],\r\n      };\r\n      ChildNameKey = \"ItemName\";\r\n      ChildRevKey = \"ItemRevision\";\r\n    } else {\r\n      console.log(\"It's a physical Product\");\r\n      parentData = {\r\n        ItemName: droppedObjectData.cardData.Name,\r\n        ItemRevision: droppedObjectData.cardData[\"Dropped Revision\"],\r\n      };\r\n      ChildNameKey = \"SpecName\";\r\n      ChildRevKey = \"SpecRevision\";\r\n    }\r\n\r\n    const formattedData = tableData.map((item) => {\r\n      // Find matching data in bosSpecDocument\r\n      let matchingData = bosSpecDocument.find(\r\n        (data) =>\r\n          data.childTitle === item.Title && data.childRevision === item.Revision\r\n      );\r\n\r\n      return {\r\n        [ChildNameKey]: matchingData ? matchingData.childName : null, // Use found childName\r\n        [ChildRevKey]: item.Revision, // Dynamic key based on type\r\n        ...parentData, // Merge Parent Data\r\n        PrintOnPurchaseOrderRequired: item[\"Print On Purchase Order Required\"],\r\n        PrintOnWorkOrderRequired: item[\"Print On Work Order Required\"],\r\n        WorkOrderDocumentRequired: item[\"Work Order Document Required\"],\r\n        PrintOnReportOrderRequired: item[\"Print On report Order Required\"],\r\n        \"SAP/JDE\": item[\"SAP/JDE\"],\r\n      };\r\n    });\r\n\r\n    formattedData.sort((a, b) => {\r\n      if (a.SpecName !== b.SpecName) {\r\n        return a.SpecName.localeCompare(b.SpecName);\r\n      }\r\n      return Number(a.SpecRevision) - Number(b.SpecRevision);\r\n    });\r\n\r\n    console.log(\"Formatted Data:\", formattedData);\r\n    const saveURL =\r\n      \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/bosAttribute/createORupdateDetails\";\r\n    const response = await fetchData(\"POST\", saveURL, formattedData);\r\n\r\n    console.log(\"the response from node API is:\", response);\r\n    if (response.status === 200) {\r\n      showSuccessToast(MSG_SAVE_SUCCESS);\r\n      setSpecData(tableData);\r\n      setScreenLoader(false);\r\n    } else {\r\n      showErrorToast(MSG_SAVE_FAILURE);\r\n      setScreenLoader(false);\r\n    }\r\n  };\r\n\r\n  console.log(\"Table Data after Adding:\", tableData);\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  console.log(\"Parents Loading State:\", loadingParentDetails);\r\n  const proposedChanges = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.proposedChanges\r\n  );\r\n  console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const bosData = useSelector((state) => state.droppedObject.BOSObjectData);\r\n\r\n  console.log(\"Bos data in BOS Widget is:\", bosData);\r\n  const bosSpecDocument = useSelector(\r\n    (state) => state.droppedObject.BOSObjectData.specDocument\r\n  );\r\n  console.log(\"BOSObjectData\", bosSpecDocument);\r\n\r\n  const updateTableData = (updatedData) => {\r\n    const newDataWithChanges = updatedData.map((newItem) => {\r\n      const originalItem = specData.find(\r\n        (oldItem) =>\r\n          oldItem.Title === newItem.Title &&\r\n          oldItem.Revision === newItem.Revision\r\n      );\r\n\r\n      if (!originalItem) return { ...newItem, changedCells: {} };\r\n\r\n      // Track changed cells\r\n      const changedCells = {};\r\n      Object.keys(newItem).forEach((key) => {\r\n        if (newItem[key] !== originalItem[key]) {\r\n          changedCells[key] = true; // Mark this cell as changed\r\n        }\r\n      });\r\n\r\n      return { ...newItem, changedCells };\r\n    });\r\n\r\n    setTableData(newDataWithChanges);\r\n  };\r\n\r\n  console.log(\"Table Data is:\", tableData);\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n    }\r\n  }, [tableData]); // Runs whenever tableData changes\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    var state = droppedObjectData.cardData[\"Maturity State\"];\r\n    var type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  const newTableData = useMemo(\r\n    () => getTableData(bosSpecDocument, type),\r\n    [bosSpecDocument, type]\r\n  );\r\n  useEffect(() => {\r\n    setSpecData(newTableData);\r\n  }, [newTableData]);\r\n\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      console.log(\"New Table Data:\", newTableData);\r\n      setTableData(newTableData);\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    }\r\n  }, [newTableData]);\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n  console.log(cardData);\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n  const columns = useMemo(\r\n    () =>\r\n      tableColumns(\r\n        type,\r\n        droppedObjectData?.cardData[\"Latest Released Revision\"],\r\n        droppedObjectData?.cardData[\"Dropped Revision\"]\r\n      ),\r\n    [type, droppedObjectData?.cardData]\r\n  );\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n      })\r\n    );\r\n    setTableData([]); // Clear local table data\r\n    setIsCardDataAvailable(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {screenLoader && (\r\n        <div className=\"loading-overlay\">\r\n          <Loader />\r\n          <p>Saving...</p>\r\n        </div>\r\n      )}\r\n      {!isDropped && !loading && !isTableLoading && <DragAndDropComponent />}\r\n      {loading && <Loader />}\r\n      {isDropped && (\r\n        <>\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {cardData && <CardWithDragAndDrop data={cardData} />}\r\n            </div>\r\n          </div>\r\n\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <BOSWidgetToolbarNativeCta\r\n                  onSave={handleSave}\r\n                  selectedRows={selectedTableRows}\r\n                  state={state}\r\n                />\r\n                <ReusableTable\r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  meta={{ updateTableData }}\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default BOSWidget;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\", // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (bosData, type) => {\r\n  if (!bosData) return [];\r\n\r\n  return bosData.map((data) => {\r\n    let rowData = {\r\n      Title: data?.childTitle || \"N/A\",\r\n      Revision: data?.childRevision || \"1\",\r\n      State: data?.childState || \"N/A\",\r\n      \"Print On Purchase Order Required\":\r\n        data.PrintOnPurchaseOrderRequired || \"No\",\r\n      \"Print On Work Order Required\": data.PrintOnWorkOrderRequired || \"No\",\r\n      \"Work Order Document Required\": data.WorkOrderDocumentRequired || \"No\",\r\n      \"Print On report Order Required\": data.PrintOnReportOrderRequired || \"No\",\r\n      \"SAP/JDE\": data[\"SAP/JDE\"] || \"No\",\r\n    };\r\n\r\n    // Add \"IsLatest\" key only if type === \"Document\"\r\n    if (type === \"Document\") {\r\n      rowData.IsLatest = data?.childLatest || \"FALSE\";\r\n    }\r\n\r\n    return rowData;\r\n  });\r\n};\r\n\r\nexport const tableColumns = (type, latestRevision, droppedRevision) => {\r\n  const baseColumns = [\r\n    { accessorKey: \"Title\", header: \"Title\" },\r\n    { accessorKey: \"Revision\", header: \"Revision\" },\r\n    { accessorKey: \"State\", header: \"State\" },\r\n  ];\r\n\r\n  if (type === \"Document\") {\r\n    baseColumns.push({ accessorKey: \"IsLatest\", header: \"Is Latest\" });\r\n  }\r\n\r\n  const editableColumns = [\r\n    \"Print On Purchase Order Required\",\r\n    \"Print On Work Order Required\",\r\n    \"Work Order Document Required\",\r\n    \"Print On report Order Required\",\r\n    \"SAP/JDE\",\r\n  ].map((columnKey) => ({\r\n    accessorKey: columnKey,\r\n    header: columnKey,\r\n    cell: ({ row, getValue, table }) => {\r\n      // Determine if the cell should be editable\r\n      const isEditable =\r\n        type === \"Document\"\r\n          ? row.original.IsLatest !== \"FALSE\" // Editable only if IsLatest is NOT \"FALSE\"\r\n          : !latestRevision || latestRevision === droppedRevision;\r\n\r\n      const handleDropdownChange = (e) => {\r\n        const updatedValue = e.target.value;\r\n        const updatedData = table\r\n          .getRowModel()\r\n          .rows.map((r) =>\r\n            r.id === row.id\r\n              ? { ...r.original, [columnKey]: updatedValue }\r\n              : r.original\r\n          );\r\n\r\n        table.options.meta?.updateTableData(updatedData);\r\n      };\r\n\r\n      return isEditable ? (\r\n        <select\r\n          value={getValue()}\r\n          onChange={handleDropdownChange}\r\n          className=\"appearance-none bg-transparent border-none cursor-pointer focus:outline-none\"\r\n          style={{\r\n            width: \"70%\",\r\n            padding: \"5px\",\r\n            fontSize: \"14px\",\r\n            background: \"none\",\r\n            border: \"none\",\r\n            textAlign: \"left\",\r\n          }}\r\n          onMouseOver={(e) => (e.target.style.border = \"1px solid #ccc\")}\r\n          onMouseOut={(e) => (e.target.style.border = \"none\")}\r\n        >\r\n          <option value=\"Yes\">Yes</option>\r\n          <option value=\"No\">No</option>\r\n        </select>\r\n      ) : (\r\n        <span>{getValue()}</span> // Show non-editable text if conditions fail\r\n      );\r\n    },\r\n  }));\r\n\r\n  return [...baseColumns, ...editableColumns];\r\n};\r\n\r\n// export const tableColumns = (type, latestRevision, droppedRevision) => [\r\n//   { accessorKey: \"Title\", header: \"Title\" },\r\n//   { accessorKey: \"Revision\", header: \"Revision\" },\r\n//   { accessorKey: \"State\", header: \"State\" },\r\n//   ...[\r\n//     \"Print On Purchase Order Required\",\r\n//     \"Print On Work Order Required\",\r\n//     \"Work Order Document Required\",\r\n//     \"Print On report Order Required\",\r\n//     \"SAP/JDE\",\r\n//   ].map((columnKey) => ({\r\n//     accessorKey: columnKey,\r\n//     header: columnKey,\r\n//     cell: ({ row, getValue, table }) => {\r\n//       const handleDropdownChange = (e) => {\r\n//         const updatedValue = e.target.value;\r\n//         const updatedData = table\r\n//           .getRowModel()\r\n//           .rows.map((r) =>\r\n//             r.id === row.id\r\n//               ? { ...r.original, [columnKey]: updatedValue }\r\n//               : r.original\r\n//           );\r\n\r\n//         table.options.meta?.updateTableData(updatedData);\r\n//       };\r\n\r\n//       return (\r\n//         <select\r\n//           value={getValue()}\r\n//           onChange={handleDropdownChange}\r\n//           className=\"appearance-none bg-transparent border-none cursor-pointer focus:outline-none\"\r\n//           style={{\r\n//             width: \"70%\",\r\n//             padding: \"5px\",\r\n//             fontSize: \"14px\",\r\n//             color: \"#333\",\r\n//             background: \"none\",\r\n//             border: \"none\",\r\n//             textAlign: \"left\",\r\n//           }}\r\n//           onMouseOver={(e) => (e.target.style.border = \"1px solid #ccc\")}\r\n//           onMouseOut={(e) => (e.target.style.border = \"none\")}\r\n//         >\r\n//           <option value=\"Yes\">Yes</option>\r\n//           <option value=\"No\">No</option>\r\n//         </select>\r\n//       );\r\n//     },\r\n//   })),\r\n// ];\r\n\r\n// {\r\n//   accessorKey: \"MBom\",\r\n//   header: \"MBom\",\r\n//   cell: ({ row, getValue, table }) => {\r\n//     const handleDropdownChange = (e) => {\r\n//       if (!CAName) return; // Prevent changes when disabled\r\n//       const updatedValue = e.target.value;\r\n\r\n//       // Update the table data state here\r\n//       const updatedData = table\r\n//         .getRowModel()\r\n//         .rows.map((r) =>\r\n//           r.id === row.id ? { ...r.original, MBom: updatedValue } : r.original\r\n//         );\r\n\r\n//       table.options.meta?.updateTableData(updatedData); // Call custom table update function\r\n//     };\r\n\r\n//     return (\r\n//       <select\r\n//         value={getValue()}\r\n//         onChange={handleDropdownChange}\r\n//         disabled={!CAName} // Disable dropdown if CAName is false\r\n//         className={`appearance-none bg-transparent border-none cursor-pointer focus:outline-none`}\r\n//         style={{\r\n//           ...(CAName === false && { appearance: \"none\" }), // Apply appearance: none only if CAName is false\r\n//           width: \"70%\",\r\n//           padding: \"5px\",\r\n//           fontSize: \"14px\",\r\n//           color: \"#333\",\r\n//           background: \"none\",\r\n//           border: \"none\",\r\n//           textAlign: \"left\",\r\n//         }}\r\n//         onMouseOver={(e) => {\r\n//           if (CAName) e.target.style.border = \"1px solid #ccc\";\r\n//         }}\r\n//         onMouseOut={(e) => {\r\n//           if (CAName) e.target.style.border = \"none\";\r\n//         }}\r\n//       >\r\n//         <option value=\"Make\">Make</option>\r\n//         <option value=\"Buy\">Buy</option>\r\n//       </select>\r\n//     );\r\n//   },\r\n// },\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_REFRESH_ERROR,\r\n  MSG_REFRESH_SUCCESS,\r\n} from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport useBOSDropableArea from \"../../hooks/useBOSDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = useBOSDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader /> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\n// import WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport BOSWidget from \"./BOSWidget\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <BOSWidget />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\r\n      \"⚠️ [index.js] Unable to inject script—parent window not accessible.\"\r\n    );\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n"],"names":["DragAndDropComponent","handleDrop","useDroppableArea","performSearch","useInterComSearch","_jsx","_Fragment","children","_jsxs","className","Image","style","width","height","src","alt","SearchInput","onSearch","searchText","title","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","console","log","id","length","objectId","objectType","warn","useBOSWidget","showErrorToast","useToast","dispatch","useDispatch","email","securityContext1","initWidget","widget","getValue","handleBOSWidget","async","collabSpace","state","type","parentName","parentRevision","setParentDetailsLoading","headers","fetchCsrfToken","MSG_FETCH_CSRF_HEADERS_FAILED","baseURL","concat","parentDirection","urlObjWAF","ChildObject","callEnoviaWebService","status","output","data","_response$data","_response$data$data","_response$data2","_response$data2$data","requestBody","getUrl","ChildObjectDocument","map","sSpec","dataelements","trim","secondaryTitle","revision","stateNLS","name","revisionBody","forEach","child","body","identifier","source","relativePath","push","RevisionUrl","response","results","item","latestVersion","versions","reduce","latest","current","doc","_objectSpread","isLatestRevision","SpecName","SpecRevision","Items","obj","ItemName","ItemRevision","Specifications","fetchData","mergedData","spec","matchingDoc","find","childState","childTitle","childLatest","childName","childRevision","PrintOnPurchaseOrderRequired","PrintOnWorkOrderRequired","WorkOrderDocumentRequired","PrintOnReportOrderRequired","setSpecDocument","error","useBOSDropableArea","loading","setLoading","useState","fetchObjectDetails","useCallback","objectDetailsResult","getDroppedObjectDetails","dataItems","success","setDroppedObjectData","cardData","draggedObjectData","_dataItems$","_dataItems$2","setIsDroppedAction","Name","MSG_FETCH_OBJECT_DETAILS_FAILED","MSG_UNEXPECTED_ERROR","initializeDroppableArea","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","_ref","editableColumns","selectedRows","onApplyUpdate","valueOptions","selectedColumn","setSelectedColumn","selectedValue","setSelectedValue","handleApplyUpdate","applyToAll","alert","onChange","e","target","value","col","disabled","val","onClick","cursor","onSave","showWarningToast","handleSaveClick","MSG_SAVEPRODUCT_RELEASED_ERROR","MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR","MassUpdateDropdown","column","scope","BOSWidget","tableKey","setTableKey","tableData","setTableData","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","specData","setSpecData","showSuccessToast","useEffect","changedCells","selectedTableRows","useSelector","droppedObject","droppedObjectData","loadingParentDetails","proposedChanges","plantObjectData","isDropped","bosData","BOSObjectData","bosSpecDocument","specDocument","prevKey","initialDraggedData","_droppedObjectData$in","_droppedObjectData$in2","items","newTableData","useMemo","getTableData","rowData","Title","Revision","State","IsLatest","Type","owner","Owner","Description","imageURL","EIN","getCardData","columns","tableColumns","latestRevision","droppedRevision","baseColumns","accessorKey","header","columnKey","cell","row","table","original","_table$options$meta","updatedValue","updatedData","getRowModel","rows","r","options","meta","updateTableData","padding","fontSize","background","border","textAlign","onMouseOver","onMouseOut","Loader","handleHomeClick","setIsDropped","parentDetails","setPlantObjectData","allPlants","initialAssignedPlants","uniquePlants","productChildren","CAName","CardWithDragAndDrop","BOSWidgetToolbarNativeCta","ChildNameKey","ChildRevKey","parentData","formattedData","matchingData","sort","a","b","localeCompare","Number","MSG_SAVE_SUCCESS","MSG_SAVE_FAILURE","ReusableTable","newDataWithChanges","newItem","originalItem","oldItem","Object","keys","key","WidgetLifecycle","window","trace","addEvent","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","split","userClickedRefresh","sessionStorage","getItem","some","line","includes","isAutoTriggeredRefresh","removeItem","latestDraggedData","store","getState","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","getElementById","createElement","appendChild","ReactDOM","render","Provider","ToastContainer","start","parent","injectedScript","textContent","injectRefreshListener"],"sourceRoot":""}