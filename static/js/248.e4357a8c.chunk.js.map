{"version":3,"file":"static/js/248.e4357a8c.chunk.js","mappings":"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","sources":["components/DragAndDrop/DragAndDrop.jsx","hooks/useBOSWidget.js","hooks/useBOSDropableArea.js","pages/BOSWidget/MassUpdateDropdown.jsx","pages/BOSWidget/BOSWidgetToolbarNativeCta.jsx","pages/BOSWidget/BOSWidget.jsx","pages/BOSWidget/BOSdataHelpers.js","pages/BOSWidget/WidgetLifecycle.jsx","pages/BOSWidget/bosIndex.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport useDroppableArea from \"../../hooks/useDroppableArea\";\r\nimport \"./DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst DragAndDropComponent = () => {\r\n  const {  handleDrop } = useDroppableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      // console.log(\"Selected objects:\", selectedObjects);\r\n      // console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"droppable-container mt-4\"\r\n      >\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import { useDispatch } from \"react-redux\";\r\n\r\nimport {\r\n  setParentDetailsLoading,\r\n  setSpecDocument,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nimport { callEnoviaWebService, loadWAFData, fetchData } from \"../utils/helpers\";\r\n\r\nconst useBOSWidget = () => {\r\n  const { showErrorToast } = useToast();\r\n  const dispatch = useDispatch();\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  let email = window.widget.getValue(\"email\");\r\n\r\n  console.log(\"Email in useBOSWidget:\", email);\r\n  // console.log(\"Security context using preferences are\", securitycontext);\r\n\r\n  const handleBOSWidget = async (\r\n    collabSpace,\r\n    state,\r\n    objectId,\r\n    type,\r\n    parentName,\r\n    parentRevision\r\n  ) => {\r\n    try {\r\n      console.log(\"Object id is:\", objectId);\r\n      console.log(\"Object type is:\", type);\r\n      dispatch(setParentDetailsLoading(true));\r\n\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      console.log(\"[useBOSWidget] CSRF Headers:\", headers);\r\n\r\n      // Step 1: Call Enovia Web Service\r\n      let baseURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/documents/parentId/${objectId}?parentRelName=SpecificationDocument`;\r\n\r\n      let parentDirection = type === \"Document\" ? \"to\" : \"from\";\r\n\r\n      let urlObjWAF = `${baseURL}&parentDirection=${parentDirection}`;\r\n      let ChildObject = await callEnoviaWebService(\r\n        \"GET\",\r\n        urlObjWAF,\r\n        \"\",\r\n        headers\r\n      );\r\n      console.log(\"SpecDetails Response:\", ChildObject);\r\n\r\n      if (\r\n        ChildObject &&\r\n        ChildObject.status &&\r\n        ChildObject.output.data.length > 0\r\n      ) {\r\n        let ChildObjectDocument = ChildObject.output.data.map((sSpec) => ({\r\n          id: sSpec.id,\r\n          title:\r\n            sSpec.dataelements.title && sSpec.dataelements.title.trim() !== \"\"\r\n              ? sSpec.dataelements.title\r\n              : sSpec.dataelements.secondaryTitle,\r\n          revision: sSpec.dataelements.revision,\r\n          state: sSpec.dataelements.stateNLS,\r\n          name: sSpec.dataelements.name,\r\n        }));\r\n\r\n        console.log(\r\n          \"[useBOSWidget] Extracted Spec Documents:\",\r\n          ChildObjectDocument\r\n        );\r\n        // if type is Document and then iterate ovet the\r\n        if (type === \"Document\") {\r\n          const revisionBody = {\r\n            data: [],\r\n          };\r\n          ChildObjectDocument.forEach((child) => {\r\n            const body = {\r\n              id: child.id,\r\n              identifier: child.id,\r\n              type: \"VPMReference\",\r\n              source: `${ENOVIA_BASE_URL}`,\r\n              relativePath: `/resources/v1/modeler/dseng/dseng:EngItem/${child.id}`,\r\n            };\r\n            revisionBody.data.push(body);\r\n          });\r\n          const RevisionUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/version/getGraph`;\r\n          const response = await callEnoviaWebService(\r\n            \"POST\",\r\n            RevisionUrl,\r\n            revisionBody,\r\n            headers\r\n          );\r\n          console.log(\"response is:\", response);\r\n          response.output.results.forEach((item) => {\r\n            // Find the latest version based on the 'revision' key\r\n            const latestVersion = item.versions.reduce((latest, current) => {\r\n              return convertRevisionToNumber(current.revision) >\r\n                convertRevisionToNumber(latest.revision)\r\n                ? current\r\n                : latest;\r\n            });\r\n\r\n            // Update 'isLatestRevision' for each document\r\n            ChildObjectDocument = ChildObjectDocument.map((doc) => ({\r\n              ...doc,\r\n              isLatestRevision: doc.id === latestVersion.id ? \"TRUE\" : \"FALSE\",\r\n            }));\r\n          });\r\n\r\n          // Function to convert revision to a comparable numeric value\r\n          function convertRevisionToNumber(rev) {\r\n            if (/^\\d+$/.test(rev)) return parseInt(rev, 10); // Handle numeric revisions (1,2,3)\r\n\r\n            let number = 0;\r\n            for (let i = 0; i < rev.length; i++) {\r\n              number =\r\n                number * 26 + (rev.charCodeAt(i) - \"A\".charCodeAt(0) + 1);\r\n            }\r\n            return number; // Handles A-Z, AA-ZZ revisions\r\n          }\r\n\r\n          console.log(\"ChildObjectDocument is:\", ChildObjectDocument);\r\n        }\r\n        let requestBody;\r\n        let getUrl;\r\n        if (type === \"Document\") {\r\n          getUrl =\r\n            \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/bosAttribute/getLatestSpecItemDetails\";\r\n          requestBody = {\r\n            SpecName: parentName, // Replace with actual SpecName if dynamic\r\n            SpecRevision: parentRevision, // Replace with actual SpecRevision if dynamic\r\n            Items: ChildObjectDocument.map((obj) => ({\r\n              ItemName: obj.name, // Replace dynamically if needed\r\n              ItemRevision: obj.revision,\r\n            })),\r\n          };\r\n        } else {\r\n          getUrl =\r\n            \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/bosAttribute/getLatestItemSpecDetails\";\r\n          requestBody = {\r\n            ItemName: parentName, // Replace with actual ItemName if dynamic\r\n            ItemRevision: parentRevision, // Replace with actual revision if dynamic\r\n            Specifications: ChildObjectDocument.map((obj) => ({\r\n              SpecName: obj.name,\r\n              SpecRevision: obj.revision,\r\n            })),\r\n          };\r\n        }\r\n\r\n        console.log(\"Requested Body is:\", requestBody);\r\n\r\n        const response = await fetchData(\"POST\", getUrl, requestBody);\r\n\r\n        console.log(\"the response from node API is:\", response);\r\n\r\n        let mergedData = [];\r\n        if (response?.data?.data?.Specifications) {\r\n          // **Case 1: API Response Contains \"Specifications\"**\r\n          response.data.data.Specifications.forEach((spec) => {\r\n            let matchingDoc = ChildObjectDocument.find(\r\n              (obj) =>\r\n                obj.name === spec.SpecName && obj.revision === spec.SpecRevision\r\n            );\r\n\r\n            mergedData.push({\r\n              childState: matchingDoc?.state || \"\",\r\n              childTitle: matchingDoc?.title || \"\",\r\n              childLatest: matchingDoc?.isLatestRevision || \"FALSE\",\r\n              childName: spec.SpecName,\r\n              childRevision: spec.SpecRevision,\r\n              PrintOnPurchaseOrderRequired: spec.PrintOnPurchaseOrderRequired,\r\n              PrintOnWorkOrderRequired: spec.PrintOnWorkOrderRequired,\r\n              WorkOrderDocumentRequired: spec.WorkOrderDocumentRequired,\r\n              PrintOnReportOrderRequired: spec.PrintOnReportOrderRequired,\r\n              \"SAP/JDE\": spec[\"SAP/JDE\"],\r\n            });\r\n          });\r\n        } else if (response?.data?.data?.Items) {\r\n          // get all the id's\r\n\r\n          // **Case 2: API Response Contains \"Items\"**\r\n          response.data.data.Items.forEach((item) => {\r\n            let matchingDoc = ChildObjectDocument.find(\r\n              (doc) =>\r\n                doc.name === item.ItemName && doc.revision === item.ItemRevision\r\n            );\r\n\r\n            mergedData.push({\r\n              childState: matchingDoc?.state || \"\",\r\n              childTitle: matchingDoc?.title || \"\",\r\n              childName: item.ItemName,\r\n              childRevision: item.ItemRevision,\r\n              childLatest: matchingDoc?.isLatestRevision || \"FALSE\",\r\n              PrintOnPurchaseOrderRequired: item.PrintOnPurchaseOrderRequired,\r\n              PrintOnWorkOrderRequired: item.PrintOnWorkOrderRequired,\r\n              WorkOrderDocumentRequired: item.WorkOrderDocumentRequired,\r\n              PrintOnReportOrderRequired: item.PrintOnReportOrderRequired,\r\n              \"SAP/JDE\": item[\"SAP/JDE\"],\r\n            });\r\n          });\r\n        } else {\r\n          console.warn(\"[useBOSWidget] Unexpected API response format.\");\r\n        }\r\n        console.log(\r\n          \"[useBOSWidget] Final Merged Data for Dispatch:\",\r\n          mergedData\r\n        );\r\n\r\n        dispatch(setSpecDocument(mergedData));\r\n        // You can now dispatch or return this data as needed\r\n      } else {\r\n        console.warn(\"[useBOSWidget] No connected childs.\");\r\n        dispatch(setSpecDocument([]));\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[useBOSWidget] Error:\", error);\r\n      throw error; // Let the caller handle the error\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // Ensure loading state is reset\r\n    }\r\n  };\r\n\r\n  return { handleBOSWidget };\r\n};\r\n\r\nexport default useBOSWidget;\r\n\r\n// response.output.results.forEach((item) => {\r\n//   // Find the latest version based on the 'revision' key\r\n//   const latestVersion = item.versions.reduce((latest, current) => {\r\n//     return convertRevisionToNumber(current.revision) > convertRevisionToNumber(latest.revision)\r\n//       ? current\r\n//       : latest;\r\n//   });\r\n\r\n//   // Update 'isLatestRevision' for each document\r\n//   ChildObjectDocument = ChildObjectDocument.map((doc) => ({\r\n//     ...doc,\r\n//     isLatestRevision: doc.id === latestVersion.id ? \"TRUE\" : \"FALSE\",\r\n//   }));\r\n// });\r\n\r\n// // Function to convert revision to a comparable numeric value\r\n// function convertRevisionToNumber(rev) {\r\n//   if (/^\\d+$/.test(rev)) return parseInt(rev, 10); // Handle numeric revisions (1,2,3)\r\n\r\n//   let number = 0;\r\n//   for (let i = 0; i < rev.length; i++) {\r\n//     number = number * 26 + (rev.charCodeAt(i) - \"A\".charCodeAt(0) + 1);\r\n//   }\r\n//   return number; // Handles A-Z, AA-ZZ revisions\r\n// }\r\n","import { useCallback, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setDroppedObjectData } from \"../store/droppedObjectSlice\";\r\nimport { setIsDropped as setIsDroppedAction } from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport usePlantAssignment from \"./usePlantAssignment\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  getDroppedObjectDetails,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\nimport useBOSWidget from \"./useBOSWidget\";\r\n\r\nconst useBOSDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handleBOSWidget } = useBOSWidget();\r\n\r\n  // const [csrfHeaders, setCsrfHeaders] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n\r\n        // const cardownerResult = await fetchCardOwnerDetailsService({\r\n        //   dataItems,\r\n        //   headers,\r\n        // });\r\n\r\n        if (objectDetailsResult.success) {\r\n          // Merge the data from both services\r\n          // const combineData = {\r\n          //   cardData: objectDetailsResult.data.cardData,\r\n          //   ownerData: cardownerResult.data.ownerData,\r\n          // };\r\n\r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n            })\r\n          );\r\n\r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n          dispatch(setIsDroppedAction(true));\r\n\r\n          // call usePlantAssignment after successfully fetching object details\r\n          if (objectDetailsResult) {\r\n            await handleBOSWidget(\r\n              draggedObjectData[\"Collaborative Space\"],\r\n              draggedObjectData[\"Maturity State\"],\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType,\r\n              draggedObjectData.Name,\r\n              draggedObjectData[\"Dropped Revision\"]\r\n            );\r\n          }\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    },\r\n    [dispatch, handleBOSWidget]\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      setLoading(true); // Start loading state\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        setLoading(false);\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    dispatch(setIsDroppedAction(false));\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n\r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n\r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default useBOSDropableArea;\r\n","import React, { useState } from \"react\";\r\n\r\nconst MassUpdateDropdown = ({\r\n  editableColumns,\r\n  selectedRows,\r\n  onApplyUpdate,\r\n  valueOptions,\r\n}) => {\r\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\r\n  const [selectedValue, setSelectedValue] = useState(\"\");\r\n\r\n  // Temporary value options (Can be made dynamic later)\r\n\r\n  const handleApplyUpdate = (applyToAll) => {\r\n    if (!selectedColumn || !selectedValue) {\r\n      alert(\"Please select a column and a value.\");\r\n      return;\r\n    }\r\n\r\n    onApplyUpdate(\r\n      selectedColumn,\r\n      selectedValue,\r\n      applyToAll ? \"all\" : \"selected\"\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"dropdown\">\r\n      <button\r\n        className=\"btn btn-outline-primary btn-lg m-2 dropdown-toggle\"\r\n        type=\"button\"\r\n        data-bs-toggle=\"dropdown\"\r\n      >\r\n        Mass Update\r\n      </button>\r\n      <div className=\"dropdown-menu p-3 \" style={{ width: \"300px\" }}>\r\n        <label>Select Column:</label>\r\n        <select\r\n          className=\"form-select mb-2\"\r\n          onChange={(e) => setSelectedColumn(e.target.value)}\r\n          value={selectedColumn}\r\n        >\r\n          <option value=\"\">-- Select Column --</option>\r\n          {editableColumns.map((col) => (\r\n            <option key={col} value={col}>\r\n              {col}\r\n            </option>\r\n          ))}\r\n        </select>\r\n\r\n        <label>Select Value:</label>\r\n        <select\r\n          className=\"form-select mb-2\"\r\n          value={selectedValue}\r\n          onChange={(e) => setSelectedValue(e.target.value)}\r\n          disabled={!selectedColumn}\r\n        >\r\n          <option value=\"\">-- Select Value --</option>\r\n          {valueOptions.map((val) => (\r\n            <option key={val} value={val}>\r\n              {val}\r\n            </option>\r\n          ))}\r\n        </select>\r\n\r\n        <button\r\n          className=\"btn btn-outline-success me-2 mb-2\"\r\n          onClick={() => handleApplyUpdate(false)}\r\n          disabled={!selectedRows.length}\r\n          style={{ cursor: !selectedRows.length ? \"not-allowed\" : \"pointer\" }}\r\n        >\r\n          Apply to Selected\r\n        </button>\r\n        <button\r\n          className=\"btn btn-outline-primary\"\r\n          onClick={() => handleApplyUpdate(true)}\r\n        >\r\n          Apply to All\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MassUpdateDropdown;\r\n","import Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_SAVEPRODUCT_RELEASED_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport MassUpdateDropdown from \"./MassUpdateDropdown\";\r\n\r\nconst BOSWidgetToolbarNativeCta = ({\r\n  onSave,\r\n  state,\r\n  selectedRows,\r\n  tableData,\r\n  onMassUpdate,\r\n  type,\r\n  latestRevision,\r\n  droppedRevision,\r\n}) => {\r\n  const { showWarningToast } = useToast();\r\n\r\n  const handleSaveClick = () => {\r\n    if (onSave) {\r\n      onSave();\r\n      // eslint-disable-next-line no-mixed-operators\r\n    } else if (\r\n      (type !== \"Document\" && !latestRevision) ||\r\n      latestRevision === droppedRevision\r\n    ) {\r\n      showWarningToast(MSG_SAVEPRODUCT_RELEASED_ERROR);\r\n    } else {\r\n      showWarningToast(MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR);\r\n    }\r\n    // When save button is clicked, call onSave passed as prop\r\n    // onSave is passed with tableData from parent\r\n  };\r\n  const handleMassUpdate = (column, value, scope) => {\r\n    if (\r\n      (type !== \"Document\" && !latestRevision) ||\r\n      latestRevision === droppedRevision\r\n    ) {\r\n      showWarningToast(MSG_SAVEPRODUCT_RELEASED_ERROR);\r\n      return;\r\n    }\r\n\r\n    if (scope === \"selected\") {\r\n      onMassUpdate(selectedRows, column, value);\r\n    } else {\r\n      onMassUpdate(tableData, column, value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"d-flex cta-absolute\">\r\n      <button\r\n        className=\"btn btn-outline-success btn-lg m-2\"\r\n        onClick={handleSaveClick}\r\n      >\r\n        Save\r\n      </button>\r\n      <MassUpdateDropdown\r\n        editableColumns={[\r\n          \"Print On Purchase Order Required\",\r\n          \"Print On Work Order Required\",\r\n          \"Work Order Document Required\",\r\n          \"Print On report Order Required\",\r\n          \"SAP/JDE\",\r\n        ]}\r\n        selectedRows={selectedRows} // Selected row IDs from table\r\n        onApplyUpdate={handleMassUpdate} // Updated function with validation\r\n        valueOptions={[\"Yes\", \"No\"]}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BOSWidgetToolbarNativeCta;\r\n","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport DragAndDropComponent from \"../../components/DragAndDrop/DragAndDrop\";\r\nimport { Image } from \"react-bootstrap\";\r\nimport \"./BOSWidget.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport { getCardData, getTableData, tableColumns } from \"./BOSdataHelpers\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { saveData } from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport useBOSDropableArea from \"../../hooks/useBOSDropableArea\";\r\nimport BOSWidgetToolbarNativeCta from \"./BOSWidgetToolbarNativeCta\";\r\nimport { fetchData } from \"../../utils/helpers\";\r\n\r\nconst BOSWidget = () => {\r\n  const { initializeDroppableArea, loading } = useBOSDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const [specData, setSpecData] = useState([]);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n\r\n  useEffect(() => {\r\n    if (specData.length) {\r\n      setTableData(specData.map((item) => ({ ...item, changedCells: {} })));\r\n    }\r\n  }, [specData]);\r\n\r\n  const handleSave = async () => {\r\n    console.log(\"Table Data is:\", tableData);\r\n    setScreenLoader(true);\r\n    console.log(\"Type of Parent:\", type);\r\n    let parentData = [];\r\n    let ChildNameKey;\r\n    let ChildRevKey;\r\n    if (type === \"Document\") {\r\n      parentData = {\r\n        SpecName: droppedObjectData.cardData.Name,\r\n        SpecRevision: droppedObjectData.cardData[\"Dropped Revision\"],\r\n      };\r\n      ChildNameKey = \"ItemName\";\r\n      ChildRevKey = \"ItemRevision\";\r\n    } else {\r\n      console.log(\"It's a physical Product\");\r\n      parentData = {\r\n        ItemName: droppedObjectData.cardData.Name,\r\n        ItemRevision: droppedObjectData.cardData[\"Dropped Revision\"],\r\n      };\r\n      ChildNameKey = \"SpecName\";\r\n      ChildRevKey = \"SpecRevision\";\r\n    }\r\n\r\n    const formattedData = tableData.map((item) => {\r\n      // Find matching data in bosSpecDocument\r\n      let matchingData = bosSpecDocument.find(\r\n        (data) =>\r\n          data.childTitle === item.Title && data.childRevision === item.Revision\r\n      );\r\n\r\n      return {\r\n        [ChildNameKey]: matchingData ? matchingData.childName : null, // Use found childName\r\n        [ChildRevKey]: item.Revision, // Dynamic key based on type\r\n        ...parentData, // Merge Parent Data\r\n        PrintOnPurchaseOrderRequired: item[\"Print On Purchase Order Required\"],\r\n        PrintOnWorkOrderRequired: item[\"Print On Work Order Required\"],\r\n        WorkOrderDocumentRequired: item[\"Work Order Document Required\"],\r\n        PrintOnReportOrderRequired: item[\"Print On report Order Required\"],\r\n        \"SAP/JDE\": item[\"SAP/JDE\"],\r\n      };\r\n    });\r\n\r\n    formattedData.sort((a, b) => {\r\n      if (a.SpecName !== b.SpecName) {\r\n        return a.SpecName.localeCompare(b.SpecName);\r\n      }\r\n      return Number(a.SpecRevision) - Number(b.SpecRevision);\r\n    });\r\n\r\n    console.log(\"Formatted Data:\", formattedData);\r\n    const saveURL =\r\n      \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/bosAttribute/createORupdateDetails\";\r\n    const response = await fetchData(\"POST\", saveURL, formattedData);\r\n\r\n    console.log(\"the response from node API is:\", response);\r\n    if (response.status === 200) {\r\n      showSuccessToast(MSG_SAVE_SUCCESS);\r\n      setSpecData(tableData);\r\n      setScreenLoader(false);\r\n    } else {\r\n      showErrorToast(MSG_SAVE_FAILURE);\r\n      setScreenLoader(false);\r\n    }\r\n  };\r\n\r\n  const handleMassUpdate = async (data, column, value) => {\r\n    console.log(\"Data when the Mass Update is Clicked:\", data);\r\n    console.log(\"Columns to Change:\", column);\r\n    console.log(\"Value after change:\", value);\r\n\r\n    const updatedData = data.map((row) => ({\r\n      ...row,\r\n      [column]: value, // Update the specified column with the new value\r\n    }));\r\n\r\n    console.log(\"Updated Data is:\", updatedData);\r\n    console.log(\"Table Data is:\", tableData);\r\n\r\n    // Merge updatedData into tableData based on matching Title & Revision\r\n    const mergedData = tableData.map((row) => {\r\n      const updatedRow = updatedData.find(\r\n        (updated) =>\r\n          updated.Title === row.Title && updated.Revision === row.Revision\r\n      );\r\n\r\n      return updatedRow ? updatedRow : row; // Use updated row if found, else keep original row\r\n    });\r\n\r\n    console.log(\"Merged Data:\", mergedData);\r\n    updateTableData(mergedData);\r\n  };\r\n\r\n  console.log(\"Table Data after Adding:\", tableData);\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  console.log(\"Parents Loading State:\", loadingParentDetails);\r\n  const proposedChanges = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.proposedChanges\r\n  );\r\n  console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const bosData = useSelector((state) => state.droppedObject.BOSObjectData);\r\n\r\n  console.log(\"Bos data in BOS Widget is:\", bosData);\r\n  const bosSpecDocument = useSelector(\r\n    (state) => state.droppedObject.BOSObjectData.specDocument\r\n  );\r\n  console.log(\"BOSObjectData\", bosSpecDocument);\r\n\r\n  const updateTableData = (updatedData) => {\r\n    const newDataWithChanges = updatedData.map((newItem) => {\r\n      const originalItem = specData.find(\r\n        (oldItem) =>\r\n          oldItem.Title === newItem.Title &&\r\n          oldItem.Revision === newItem.Revision\r\n      );\r\n\r\n      if (!originalItem) return { ...newItem, changedCells: {} };\r\n\r\n      // Track changed cells\r\n      const changedCells = {};\r\n      Object.keys(newItem).forEach((key) => {\r\n        if (newItem[key] !== originalItem[key]) {\r\n          changedCells[key] = true; // Mark this cell as changed\r\n        }\r\n      });\r\n\r\n      return { ...newItem, changedCells };\r\n    });\r\n\r\n    setTableData(newDataWithChanges);\r\n  };\r\n\r\n  console.log(\"Table Data is:\", tableData);\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n    }\r\n  }, [tableData]); // Runs whenever tableData changes\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    var state = droppedObjectData.cardData[\"Maturity State\"];\r\n    var type = droppedObjectData.initialDraggedData?.data?.items[0].objectType;\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  const newTableData = useMemo(\r\n    () => getTableData(bosSpecDocument, type),\r\n    [bosSpecDocument, type]\r\n  );\r\n  useEffect(() => {\r\n    setSpecData(newTableData);\r\n  }, [newTableData]);\r\n\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      console.log(\"New Table Data:\", newTableData);\r\n      setTableData(newTableData);\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    }\r\n  }, [newTableData]);\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n  console.log(cardData);\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n  const columns = useMemo(\r\n    () =>\r\n      tableColumns(\r\n        type,\r\n        droppedObjectData?.cardData[\"Latest Released Revision\"],\r\n        droppedObjectData?.cardData[\"Dropped Revision\"]\r\n      ),\r\n    [type, droppedObjectData?.cardData]\r\n  );\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n      })\r\n    );\r\n    setTableData([]); // Clear local table data\r\n    setIsCardDataAvailable(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {screenLoader && (\r\n        <div className=\"loading-overlay\">\r\n          <Loader />\r\n          <p>Saving...</p>\r\n        </div>\r\n      )}\r\n      {!isDropped && !loading && !isTableLoading && <DragAndDropComponent />}\r\n      {loading && <Loader />}\r\n      {isDropped && (\r\n        <>\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {cardData && <CardWithDragAndDrop data={cardData} />}\r\n            </div>\r\n          </div>\r\n\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <BOSWidgetToolbarNativeCta\r\n                  onSave={handleSave}\r\n                  type={type}\r\n                  latestRevision={\r\n                    droppedObjectData?.cardData[\"Latest Released Revision\"]\r\n                  }\r\n                  droppedRevision={\r\n                    droppedObjectData?.cardData[\"Dropped Revision\"]\r\n                  }\r\n                  selectedRows={selectedTableRows}\r\n                  state={state}\r\n                  tableData={tableData}\r\n                  onMassUpdate={handleMassUpdate}\r\n                />\r\n                <ReusableTable\r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  meta={{ updateTableData }}\r\n                  widgetType=\"Bos_Attribute_Widget\"\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default BOSWidget;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\", // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (bosData, type) => {\r\n  if (!bosData) return [];\r\n\r\n  return bosData.map((data) => {\r\n    let rowData = {\r\n      Title: data?.childTitle || \"N/A\",\r\n      Revision: data?.childRevision || \"1\",\r\n      State: data?.childState || \"N/A\",\r\n      \"Print On Purchase Order Required\":\r\n        data.PrintOnPurchaseOrderRequired || \"No\",\r\n      \"Print On Work Order Required\": data.PrintOnWorkOrderRequired || \"No\",\r\n      \"Work Order Document Required\": data.WorkOrderDocumentRequired || \"No\",\r\n      \"Print On report Order Required\": data.PrintOnReportOrderRequired || \"No\",\r\n      \"SAP/JDE\": data[\"SAP/JDE\"] || \"No\",\r\n    };\r\n\r\n    // Add \"IsLatest\" key only if type === \"Document\"\r\n    if (type === \"Document\") {\r\n      rowData.IsLatest = data?.childLatest || \"FALSE\";\r\n    }\r\n\r\n    return rowData;\r\n  });\r\n};\r\n\r\nexport const tableColumns = (type, latestRevision, droppedRevision) => {\r\n  const baseColumns = [\r\n    { accessorKey: \"Title\", header: \"Title\" },\r\n    { accessorKey: \"Revision\", header: \"Revision\" },\r\n    { accessorKey: \"State\", header: \"State\" },\r\n  ];\r\n\r\n  if (type === \"Document\") {\r\n    baseColumns.push({ accessorKey: \"IsLatest\", header: \"Is Latest\" });\r\n  }\r\n\r\n  const editableColumns = [\r\n    \"Print On Purchase Order Required\",\r\n    \"Print On Work Order Required\",\r\n    \"Work Order Document Required\",\r\n    \"Print On report Order Required\",\r\n    \"SAP/JDE\",\r\n  ].map((columnKey) => ({\r\n    accessorKey: columnKey,\r\n    header: columnKey,\r\n    cell: ({ row, getValue, table }) => {\r\n      // Determine if the cell should be editable\r\n      const isEditable =\r\n        type === \"Document\"\r\n          ? row.original.IsLatest !== \"FALSE\" // Editable only if IsLatest is NOT \"FALSE\"\r\n          : !latestRevision || latestRevision === droppedRevision;\r\n\r\n      const handleDropdownChange = (e) => {\r\n        const updatedValue = e.target.value;\r\n        const updatedData = table\r\n          .getRowModel()\r\n          .rows.map((r) =>\r\n            r.id === row.id\r\n              ? { ...r.original, [columnKey]: updatedValue }\r\n              : r.original\r\n          );\r\n\r\n        table.options.meta?.updateTableData(updatedData);\r\n      };\r\n\r\n      return isEditable ? (\r\n        <select\r\n          value={getValue()}\r\n          onChange={handleDropdownChange}\r\n          className=\"appearance-none bg-transparent border-none cursor-pointer focus:outline-none\"\r\n          style={{\r\n            width: \"70%\",\r\n            padding: \"5px\",\r\n            fontSize: \"14px\",\r\n            background: \"none\",\r\n            border: \"none\",\r\n            textAlign: \"left\",\r\n          }}\r\n          onMouseOver={(e) => (e.target.style.border = \"1px solid #ccc\")}\r\n          onMouseOut={(e) => (e.target.style.border = \"none\")}\r\n        >\r\n          <option value=\"Yes\">Yes</option>\r\n          <option value=\"No\">No</option>\r\n        </select>\r\n      ) : (\r\n        <span>{getValue()}</span> // Show non-editable text if conditions fail\r\n      );\r\n    },\r\n  }));\r\n\r\n  return [...baseColumns, ...editableColumns];\r\n};\r\n\r\n// export const tableColumns = (type, latestRevision, droppedRevision) => [\r\n//   { accessorKey: \"Title\", header: \"Title\" },\r\n//   { accessorKey: \"Revision\", header: \"Revision\" },\r\n//   { accessorKey: \"State\", header: \"State\" },\r\n//   ...[\r\n//     \"Print On Purchase Order Required\",\r\n//     \"Print On Work Order Required\",\r\n//     \"Work Order Document Required\",\r\n//     \"Print On report Order Required\",\r\n//     \"SAP/JDE\",\r\n//   ].map((columnKey) => ({\r\n//     accessorKey: columnKey,\r\n//     header: columnKey,\r\n//     cell: ({ row, getValue, table }) => {\r\n//       const handleDropdownChange = (e) => {\r\n//         const updatedValue = e.target.value;\r\n//         const updatedData = table\r\n//           .getRowModel()\r\n//           .rows.map((r) =>\r\n//             r.id === row.id\r\n//               ? { ...r.original, [columnKey]: updatedValue }\r\n//               : r.original\r\n//           );\r\n\r\n//         table.options.meta?.updateTableData(updatedData);\r\n//       };\r\n\r\n//       return (\r\n//         <select\r\n//           value={getValue()}\r\n//           onChange={handleDropdownChange}\r\n//           className=\"appearance-none bg-transparent border-none cursor-pointer focus:outline-none\"\r\n//           style={{\r\n//             width: \"70%\",\r\n//             padding: \"5px\",\r\n//             fontSize: \"14px\",\r\n//             color: \"#333\",\r\n//             background: \"none\",\r\n//             border: \"none\",\r\n//             textAlign: \"left\",\r\n//           }}\r\n//           onMouseOver={(e) => (e.target.style.border = \"1px solid #ccc\")}\r\n//           onMouseOut={(e) => (e.target.style.border = \"none\")}\r\n//         >\r\n//           <option value=\"Yes\">Yes</option>\r\n//           <option value=\"No\">No</option>\r\n//         </select>\r\n//       );\r\n//     },\r\n//   })),\r\n// ];\r\n\r\n// {\r\n//   accessorKey: \"MBom\",\r\n//   header: \"MBom\",\r\n//   cell: ({ row, getValue, table }) => {\r\n//     const handleDropdownChange = (e) => {\r\n//       if (!CAName) return; // Prevent changes when disabled\r\n//       const updatedValue = e.target.value;\r\n\r\n//       // Update the table data state here\r\n//       const updatedData = table\r\n//         .getRowModel()\r\n//         .rows.map((r) =>\r\n//           r.id === row.id ? { ...r.original, MBom: updatedValue } : r.original\r\n//         );\r\n\r\n//       table.options.meta?.updateTableData(updatedData); // Call custom table update function\r\n//     };\r\n\r\n//     return (\r\n//       <select\r\n//         value={getValue()}\r\n//         onChange={handleDropdownChange}\r\n//         disabled={!CAName} // Disable dropdown if CAName is false\r\n//         className={`appearance-none bg-transparent border-none cursor-pointer focus:outline-none`}\r\n//         style={{\r\n//           ...(CAName === false && { appearance: \"none\" }), // Apply appearance: none only if CAName is false\r\n//           width: \"70%\",\r\n//           padding: \"5px\",\r\n//           fontSize: \"14px\",\r\n//           color: \"#333\",\r\n//           background: \"none\",\r\n//           border: \"none\",\r\n//           textAlign: \"left\",\r\n//         }}\r\n//         onMouseOver={(e) => {\r\n//           if (CAName) e.target.style.border = \"1px solid #ccc\";\r\n//         }}\r\n//         onMouseOut={(e) => {\r\n//           if (CAName) e.target.style.border = \"none\";\r\n//         }}\r\n//       >\r\n//         <option value=\"Make\">Make</option>\r\n//         <option value=\"Buy\">Buy</option>\r\n//       </select>\r\n//     );\r\n//   },\r\n// },\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_REFRESH_ERROR,\r\n  MSG_REFRESH_SUCCESS,\r\n} from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport useBOSDropableArea from \"../../hooks/useBOSDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = useBOSDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader /> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\n// import WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport BOSWidget from \"./BOSWidget\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <BOSWidget />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\r\n      \"⚠️ [index.js] Unable to inject script—parent window not accessible.\"\r\n    );\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n"],"names":["DragAndDropComponent","handleDrop","useDroppableArea","performSearch","useInterComSearch","_jsx","_Fragment","children","_jsxs","className","Image","style","width","height","src","alt","SearchInput","onSearch","searchText","title","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","length","id","objectId","objectType","console","warn","useBOSWidget","showErrorToast","useToast","dispatch","useDispatch","ENOVIA_BASE_URL","process","email","window","widget","getValue","log","handleBOSWidget","async","collabSpace","state","type","parentName","parentRevision","setParentDetailsLoading","headers","fetchCsrfToken","MSG_FETCH_CSRF_HEADERS_FAILED","baseURL","concat","parentDirection","urlObjWAF","ChildObject","callEnoviaWebService","status","output","data","_response$data","_response$data$data","_response$data2","_response$data2$data","requestBody","getUrl","ChildObjectDocument","map","sSpec","dataelements","trim","secondaryTitle","revision","stateNLS","name","revisionBody","forEach","child","body","identifier","source","relativePath","push","RevisionUrl","response","convertRevisionToNumber","rev","test","parseInt","number","i","charCodeAt","results","item","latestVersion","versions","reduce","latest","current","doc","_objectSpread","isLatestRevision","SpecName","SpecRevision","Items","obj","ItemName","ItemRevision","Specifications","fetchData","mergedData","spec","matchingDoc","find","childState","childTitle","childLatest","childName","childRevision","PrintOnPurchaseOrderRequired","PrintOnWorkOrderRequired","WorkOrderDocumentRequired","PrintOnReportOrderRequired","setSpecDocument","error","useBOSDropableArea","loading","setLoading","useState","fetchObjectDetails","useCallback","objectDetailsResult","getDroppedObjectDetails","dataItems","success","setDroppedObjectData","cardData","draggedObjectData","_dataItems$","_dataItems$2","setIsDroppedAction","Name","MSG_FETCH_OBJECT_DETAILS_FAILED","MSG_UNEXPECTED_ERROR","initializeDroppableArea","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","_ref","editableColumns","selectedRows","onApplyUpdate","valueOptions","selectedColumn","setSelectedColumn","selectedValue","setSelectedValue","handleApplyUpdate","applyToAll","alert","onChange","e","target","value","col","disabled","val","onClick","cursor","onSave","tableData","onMassUpdate","latestRevision","droppedRevision","showWarningToast","handleSaveClick","MSG_SAVEPRODUCT_RELEASED_ERROR","MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR","MassUpdateDropdown","handleMassUpdate","column","scope","BOSWidget","tableKey","setTableKey","setTableData","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","specData","setSpecData","showSuccessToast","useEffect","changedCells","selectedTableRows","useSelector","droppedObject","droppedObjectData","loadingParentDetails","proposedChanges","plantObjectData","isDropped","bosData","BOSObjectData","bosSpecDocument","specDocument","updateTableData","updatedData","newDataWithChanges","newItem","originalItem","oldItem","Title","Revision","Object","keys","key","prevKey","initialDraggedData","_droppedObjectData$in","_droppedObjectData$in2","items","newTableData","useMemo","getTableData","rowData","State","IsLatest","Type","owner","Owner","Description","imageURL","EIN","getCardData","columns","tableColumns","baseColumns","accessorKey","header","columnKey","cell","row","table","original","_table$options$meta","updatedValue","getRowModel","rows","r","options","meta","padding","fontSize","background","border","textAlign","onMouseOver","onMouseOut","Loader","handleHomeClick","setIsDropped","parentDetails","setPlantObjectData","allPlants","initialAssignedPlants","uniquePlants","productChildren","CAName","CardWithDragAndDrop","BOSWidgetToolbarNativeCta","ChildNameKey","ChildRevKey","parentData","formattedData","matchingData","sort","a","b","localeCompare","Number","MSG_SAVE_SUCCESS","MSG_SAVE_FAILURE","updatedRow","updated","ReusableTable","widgetType","WidgetLifecycle","trace","addEvent","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","split","userClickedRefresh","sessionStorage","getItem","some","line","includes","isAutoTriggeredRefresh","removeItem","latestDraggedData","store","getState","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","getElementById","createElement","appendChild","ReactDOM","render","Provider","ToastContainer","start","parent","injectedScript","textContent","injectRefreshListener"],"sourceRoot":""}