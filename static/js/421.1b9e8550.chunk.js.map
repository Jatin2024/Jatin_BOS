{"version":3,"file":"static/js/421.1b9e8550.chunk.js","mappings":"6MAaA,MA+LA,EA/LcA,IAA8D,IAA7D,KAAEC,EAAI,QAAEC,EAAO,WAAEC,EAAU,UAAEC,EAAS,OAAEC,EAAM,MAAEC,GAAON,EACpE,MAAM,iBAAEO,IAAqBC,EAAAA,EAAAA,KAC7BC,QAAQC,IAAI,0BAA2BT,GACvC,MAAOU,EAAiBC,IAAsBC,EAAAA,EAAAA,UAASZ,IAChDa,EAAMC,IAAWF,EAAAA,EAAAA,WAAS,IAC1BG,EAAcC,IAAmBJ,EAAAA,EAAAA,UAAS,CAAC,IAElDK,EAAAA,EAAAA,YAAU,KACRN,EAAmBX,EAAK,GACvB,CAACA,IAEJ,MAAMkB,EAAcA,IAAMJ,GAAQ,GAgD5BK,GAAkBC,EAAAA,EAAAA,UAAQ,IAavB,CAZiB,CACtBC,GAAI,SACJC,KAAMC,IAAA,IAAC,IAAEC,GAAKD,EAAA,OACZE,EAAAA,EAAAA,KAAA,SACEC,KAAK,WACLC,UAAU,mBACVC,QAASJ,EAAIK,gBACbC,SAAUN,EAAIO,4BACd,MAIsB9B,IAC3B,CAACA,IAEE+B,GAAQC,EAAAA,EAAAA,IAAc,CAC1BjC,KAAMU,EACNT,QAASkB,EACTd,MAAO,CACLU,gBAEFmB,oBAAoB,EACpBC,qBAAsBnB,EACtBoB,iBAAiBA,EAAAA,EAAAA,QAGnB,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEd,EAAAA,EAAAA,KAAA,UACEC,KAAK,SACLC,UAAU,qCACVa,QA9EaC,KACbrC,EACFU,GAAQ,GAKRR,EAJmB,aAAVD,EAIQqC,EAAAA,GAKAC,EAAAA,GACnB,EAiEwBJ,SAEnBrC,IAGFW,IACCwB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEd,EAAAA,EAAAA,KAAA,OAAKE,UAAU,gBAAgBiB,SAAS,KAAIL,UAC1Cd,EAAAA,EAAAA,KAAA,OACEE,UAAU,qCACVkB,MAAO,CAAEC,SAAU,SAAUP,UAE7BF,EAAAA,EAAAA,MAAA,OAAKV,UAAU,2BAA0BY,SAAA,EACvCF,EAAAA,EAAAA,MAAA,OAAKV,UAAU,eAAcY,SAAA,EAC3Bd,EAAAA,EAAAA,KAAA,MAAIE,UAAU,mBAAkBY,SAAEtC,EAAQ,GAAG8C,UAE7CV,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEd,EAAAA,EAAAA,KAAA,UACEC,KAAK,SACLC,UAAU,+BACVa,QAASA,IACPR,EAAMgB,iCAANhB,CAAwC,CACtCiB,OAAQ,CAAErB,SAAS,KAEtBW,SACF,gBAGDd,EAAAA,EAAAA,KAAA,UACEC,KAAK,SACLC,UAAU,4BACVa,QAASA,IACPR,EAAMgB,iCAANhB,CAAwC,CACtCiB,OAAQ,CAAErB,SAAS,KAEtBW,SACF,wBAKLd,EAAAA,EAAAA,KAAA,OAAKE,UAAU,iBAAgBY,SAC5BP,EAAMkB,cAAcC,KAAKC,OAAS,GACjC3B,EAAAA,EAAAA,KAAA,OACEE,UAAU,gBACVkB,MAAO,CAAEQ,UAAW,QAASd,SAE5BP,EAAMkB,cAAcC,KAAKG,KAAK9B,IAC7Ba,EAAAA,EAAAA,MAAA,OAEEV,UAAU,8CACVkB,MAAO,CACLU,gBAAiB/B,EAAIK,gBACjB,UACA,WACJU,SAAA,EAEFd,EAAAA,EAAAA,KAAA,OAAKE,UAAU,OAAMY,UAClBiB,EAAAA,EAAAA,IACChC,EAAIiC,kBAAkB,GAAGC,OAAOC,UAAUrC,KAC1CE,EAAIiC,kBAAkB,GAAGG,iBAG7BnC,EAAAA,EAAAA,KAAA,OAAAc,SAAMf,EAAIqC,SAAS5D,EAAQ,GAAG6D,iBAdzBtC,EAAIH,SAmBfI,EAAAA,EAAAA,KAAA,KAAGE,UAAU,iBAAgBY,SAAC,yBAGlCF,EAAAA,EAAAA,MAAA,OACEV,UAAU,0CACVkB,MAAO,CAAEU,gBAAiB,WAAYhB,SAAA,EAEtCd,EAAAA,EAAAA,KAAA,UACEC,KAAK,SACLC,UAAU,yBACVa,QAAStB,EAAYqB,SACtB,WAGDd,EAAAA,EAAAA,KAAA,UACEe,QAjJDuB,KAEf,MACMC,EADehC,EAAMiC,sBAAsBd,KACfG,KAC/BY,GAASA,EAAKL,SAAS,qBAE1BrD,QAAQC,IAAI,kBAAmBuD,GAEH,IAAxBA,EAAaZ,OAEf9C,EAAiB6D,EAAAA,KAajBnD,EAAgB,CAAC,GACjBb,EAAU6D,GACV9C,IACF,EAwHgBQ,KAAK,SACLC,UAAU,kBAAiBY,SAC5B,mBAOTd,EAAAA,EAAAA,KAAA,OAAKE,UAAU,kCAGlB,C,oECtMA,MCAMyC,EAAWC,MAAOC,EAAYC,KACzC,IAAIC,EAAY,CAAEC,MAAO,IACzBjE,QAAQC,IAAI,iCAEZ,IAAK,IAADiE,EACF,MAAMC,QAAgBC,EAAAA,EAAAA,MAEhBC,EAAYR,SACT,IAAIS,SAAQ,CAACC,EAASC,KAC3BL,EAAQM,qBAAqBC,EAAK,CAChCC,OAAQ,MACRZ,UACA7C,KAAM,OACN0D,WAAaC,IACX7E,QAAQC,IAAI,qBAAsB4E,GAElCN,EAAQM,EAAS,EAEnBC,UAAYC,IACV/E,QAAQ+E,MAAM,kBAAmBA,GACjCP,EAAOO,EAAM,GAEf,IAKN,IAAIC,EAAS,2HAAAC,OAA8HnB,GAC3I,MACMoB,EAAqC,QAAjChB,SADmBG,EAAUW,IACXG,aAAa,UAAE,IAAAjB,OAAA,EAA9BA,EAAgCkB,WAI7C,GAFApF,QAAQC,IAAI,yBAA0BiF,GAElCA,EAAM,CAER,MAAMG,EAAK,oGAAAJ,OAAuGC,EAAI,qCAChHI,QAAmBjB,EAAUgB,GAInC,GAFArF,QAAQC,IAAI,yBAA0BqF,GAElCA,EAAY,CAEd,IAAK,MAAM5B,KAAQ4B,EAAWC,cAAgB,GAC5C,GAAkB,kBAAd7B,EAAKxC,KAA0B,CACjC,MAAMsE,EAAW,oGAAAP,OAAuGvB,EAAK0B,WAAU,qCAEvI,IAEE,MAAMK,QAAyBpB,EAAUmB,GAEzCxF,QAAQC,IAAI,yBAA0BwF,GAElCA,GACFzB,EAAUC,MAAMyB,KAAK,CACnBC,QAASF,EAAiBG,MAC1BC,QAASJ,EAAiB5F,OAGhC,CAAE,MAAOkF,GACP/E,QAAQ+E,MAAM,iCAAkCA,EAClD,CACF,CAGFf,EAAoB,SAAIsB,EAAWzF,MACnCmE,EAAoB,SAAIsB,EAAWM,KACrC,CACF,CAGA,OADA5F,QAAQC,IAAI,mBAAoB+D,GACzBA,CACT,CAAE,MAAOe,GAEP,MADA/E,QAAQ+E,MAAM,qBAAsBA,GAC9BA,CACR,G,gECtDF,MAwHA,EAxH2Be,KACzB,MAAM,eAAEC,IAAmBhG,EAAAA,EAAAA,KAErBiG,GAAWC,EAAAA,EAAAA,MAGjB,IAAIC,EAAQ,GACRC,EAAmB,IACvBC,EAAAA,EAAAA,IAAYC,IACVF,EAAmBE,EAAOC,SAAS,eACnCJ,EAAQG,EAAOC,SAAS,QAAQ,IAGlCtG,QAAQC,IAAI,+BAAgCiG,GAC5ClG,QAAQC,IAAI,0CAA2CkG,GAuGvD,MAAO,CAAEI,sBAnGqB1C,MAAO2C,EAAa3G,EAAO4G,EAAUvF,KACjE,IACE8E,GAASU,EAAAA,EAAAA,KAAwB,IACjC,MAAM3C,QAAgB4C,EAAAA,EAAAA,GAAeR,GAErC,GAAIpC,EAAS,CACX/D,QAAQC,IAAI,mCAAoC8D,GAChD,MAAM6C,OF7CoB/C,OAAOE,EAAS0C,EAAUP,KAC1D,IACElG,QAAQC,IAAI,iCAAkCwG,GAC9C,MAAMtC,QAAgBC,EAAAA,EAAAA,MACtB,IAAIY,EACF,yGACF,MAAMH,QAAiB,IAAIP,SAAQ,CAACC,EAASC,KAC3CL,EAAQM,qBAAqBO,EAAW,CACtCL,OAAQ,OACRZ,SAAO8C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACF9C,GAAO,IACV,eAAgB,qBAElBvE,KAAMsH,KAAKC,UAAU,CAAEvH,KAAM,CAAC,CAAEwH,SAAUP,MAE1CvF,KAAM,OACN0D,WAAYL,EACZO,UAAWN,GACX,IAGJxE,QAAQC,IAAI,0CAA2C4E,GAEvD,IAAIoC,EAAY,GAEZC,EAAgB,CAAEC,OAAQ,IAC9B,GAAItC,IACFA,EAASuC,QAAQC,SAASC,IACxBA,EAAOC,SAASC,WAAWH,SAASI,IAEb,aAAjBA,EAAMC,QACRR,EAAcC,OAAOzB,KAAK,CACxBiC,IAAKF,EAAMG,YAAYC,QAAQ,QAAS,KAE5C,GACA,IAEAX,EAAcC,OAAOvE,OAAS,GAAG,CACnC,IAAIkF,EACF,+HACF,MAAMC,QAAoB,IAAIzD,SAAQ,CAACC,EAASC,KAC9CL,EAAQM,qBAAqBqD,EAAQ,CACnCnD,OAAQ,OACRZ,QAAS,CAEP,eAAgB,oBAElBvE,KAAMsH,KAAKC,UAAUG,GACrBhG,KAAM,OACN0D,WAAYL,EACZO,UAAWN,GACX,IAEJxE,QAAQC,IAAI,qBAAsB8H,GAE9BA,IACFd,EAAYc,EAAYZ,OACrBa,QAAQP,GAAUA,EAAMQ,QAAQC,SAAShC,KACzCpD,KAAK2E,GAAUA,EAAM7B,QAE5B,CAKF,OAFA5F,QAAQC,IAAI,kCAAmCgH,GAExCA,CACT,CAAE,MAAOlC,GAEP,MADA/E,QAAQ+E,MAAM,qCAAsCA,GAC9CA,CACR,GExBoCoD,CAC5BpE,EACA0C,EACAP,GAEFlG,QAAQC,IAAI,kCAAmC2G,GAE/C,IAAIwB,EAAkB,IAAIxB,EAAiBJ,GAQ3C,GANAxG,QAAQC,IACN,2CACAmI,GAIEA,EAAiB,CACnB,MAAMC,OC7DYxE,OAAOuE,EAAiBrE,KAClD,IACE,IAAIuE,EAAmB,GACvBtI,QAAQC,IAAI,qCAAsCmI,GAClDpI,QAAQC,IAAI,gCAAiC8D,GAC7C,MAAMI,QAAgBC,EAAAA,EAAAA,MAEhBC,EAAYR,SACT,IAAIS,SAAQ,CAACC,EAASC,KAC3BL,EAAQM,qBAAqBC,EAAK,CAChCC,OAAQ,MACRZ,UACA7C,KAAM,OACN0D,WAAaC,IACX7E,QAAQC,IAAI,qBAAsB4E,GAClCN,EAAQM,EAAS,EAEnBC,UAAYC,IACV/E,QAAQ+E,MAAM,kBAAmBA,GACjCP,EAAOO,EAAM,GAEf,IAKAwD,EAAoBH,EAAgBtF,KAAIe,UAC5C,IAAK,IAAD2E,EAAAC,EACF,MAAMC,EAAc,wHAAAzD,OAA2HuB,GAGzImC,EAAsC,QAA7BH,SADmBnE,EAAUqE,IACNE,cAAM,IAAAJ,GAE3C,QAF2CC,EAA1BD,EAA4BK,MAC3CnF,GAASA,EAAKkC,QAAUY,WAC1B,IAAAiC,OAF2C,EAA1BA,EAEf5H,GAIH,GAFAb,QAAQC,IAAI,qCAAsC0I,GAE9CA,EAAW,CACb,MAAMG,EAAc,sGAAA7D,OAAyG0D,EAAS,8CAEhII,QAAsB1E,EAAUyE,IAEhC,OAAEF,GAAWG,EAEnB,GAAIH,GAAUA,EAAOhG,OAAS,EAAG,CAAC,IAADoG,EAAAC,EAC/BjJ,QAAQC,IAAI,uCAAwC2I,GAEpD,MAAMM,EAAyB,QAAZF,EAAGJ,EAAO,UAAE,IAAAI,OAAA,EAATA,EAAWG,aAEjC,IAAiB,OAAbD,QAAa,IAAbA,GAAqB,QAARD,EAAbC,EAAeN,cAAM,IAAAK,OAAR,EAAbA,EAAuBrG,QAAS,EAAG,CAAC,IAADwG,EACrC,MAAMC,EAAiD,QAAvCD,EAAGF,EAAcN,OAAO,GAAGO,oBAAY,IAAAC,OAAA,EAApCA,EAAsCR,OAEzD,GAAIS,GAAcA,EAAWzG,OAAS,EAAG,CAEvC,MAAM0G,EAAmBD,EAAWrB,QACjCuB,IACEjB,EAAiBkB,MACfC,GAAcA,EAAU5I,KAAO0I,EAAM1I,OAK5CyH,EAAmB,IAAIA,KAAqBgB,EAC9C,CACF,CACF,CACF,CACF,CAAE,MAAOvE,GAEP,MADA/E,QAAQ+E,MAAM,0BAA2ByB,EAAazB,GAChDA,CACR,KAIF,aADMT,QAAQoF,IAAInB,GACXD,CACT,CAAE,MAAOvD,GAEP,MADA/E,QAAQ+E,MAAM,sCAAuCA,GAC/CA,CACR,GDjBgC4E,CACtBvB,EACArE,GAKF,GAFA/D,QAAQC,IAAI,yCAA0CoI,GAElDA,EAAW,CACb,MAAMuB,OEpEiB/F,OACjCwE,EACAtE,EACA0C,KAEA,IACEzG,QAAQC,IAAI,0CAA2CoI,GAEvD,MAAMS,EAAc,6GAAA7D,OAAgHwB,EAAQ,6CAEtItC,QAAgBC,EAAAA,EAAAA,MAEhBS,QAAiB,IAAIP,SAAQ,CAACC,EAASC,KAC3CL,EAAQM,qBAAqBqE,EAAgB,CAC3CnE,OAAQ,MACRZ,UACA7C,KAAM,OACN0D,WAAYL,EACZO,UAAWN,GACX,IAGJxE,QAAQC,IAAI,0CAA2C4E,GAEvD,IAAIgF,EAAyB,GACzBC,EAAqB,GAGrBC,EAAkBlF,EAAS+D,OAAO,GAAGoB,yBAAyBpB,OAmElE,aAhEMtE,QAAQoF,IACZK,EAAgBjH,KAAIe,UAClB7D,QAAQC,IAAI,iBAAkBgK,GAC9B,IAAK,IAAIC,KAAe7B,EACtB,GAAI4B,EAAUE,UAAYD,EAAYrJ,GAAI,CACxC,IAAIuJ,EAAYF,EAAYtE,MAC5BwE,EAAYA,EAAUvC,QAAQ,QAAS,IAAIA,QAAQ,OAAQ,IAC3D,IAAIwC,EAAM,CAAExJ,GAAIoJ,EAAUE,QAASvE,MAAOsE,EAAYtE,OAEtD,MAAM0E,EAAeL,EAAUM,WAAWzH,KAAK0H,GAE3CA,EAAcC,KAAKvC,SAAS,eAC5BsC,EAAcE,MAEP9G,EAAS4G,EAAcE,MAAO3G,GAAS4G,MAC3CC,IACC,GAAIA,EAAmB,CACrB5K,QAAQC,IAAI2K,GACZP,EAAe,UAAqB,OAAjBO,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBC,SACtCR,EAAe,UAAqB,OAAjBO,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBE,SAEtC,IAAInF,EAAU,GACZE,EAAU,GAEZ+E,EAAkB3G,MAAMoD,SAAS0D,IAC/BpF,GAAW,IAAMoF,EAAGpF,QACpBE,GAAW,IAAMkF,EAAGlF,OAAO,IAG7BwE,EAAY,OAAI1E,EAAQqF,MAAM,GAC9BX,EAAkB,aAAIxE,EAAQmF,MAAM,EACtC,MAKJX,EAAIG,EAAcC,KAAK5C,QAAQuC,EAAW,IAAIa,QAC5CT,EAAcE,MACTpG,QAAQC,mBAKbD,QAAQoF,IAAIY,GAClBT,EAAyB,IAAIA,EAAwBQ,GACrDrK,QAAQC,IAAI,2BAA4B4J,GACxC7J,QAAQC,IAAI,oBAAqBoK,EACnC,CACF,KAIJrK,QAAQC,IACN,qDACA4J,GAEFC,EAAqBzB,EAAUL,QAC5BkD,IACErB,EAAuBL,MAAM2B,GAAaA,EAAStK,KAAOqK,EAASrK,OAExEb,QAAQC,IAAI,wBAAyB6J,GAI9B,CACLsB,SAAS,EACT5L,KAAM,CACJ6L,UAAW,CACThD,UAAWA,EACXiD,sBAAuBzB,EACvB0B,aAAczB,IAItB,CAAE,MAAO/E,GAEP,OADA/E,QAAQ+E,MAAM,yCAA0CA,GACjD,CAAEqG,SAAS,EAAOrG,QAC3B,GFxC+ByG,CACnBnD,EACAtE,EACA0C,GAGFzG,QAAQC,IAAI,2BAA4B2J,GAGpCA,EAAOwB,SACTpF,GAASyF,EAAAA,EAAAA,IAAmB7B,EAAOpK,KAAK6L,YACxCrF,GAAS0F,EAAAA,EAAAA,IAAW3H,KAEpB/D,QAAQ+E,MAAM,6BAElB,MACE/E,QAAQ2L,KAAK,uCAEjB,MACE3L,QAAQ2L,KAAK,6CAIf,IAAIC,EAAqB,CAAC,EAC1B5L,QAAQC,IAAI,eAAgBiB,GAE1B0K,EADW,iBAAT1K,EACmB,CACnBkK,SAAS,EACT5L,KAAM,SGlGkBqE,OAAOE,EAAS0C,KAClD,IAAIzB,EACF,sGACFA,GAAayB,EACbzB,GAAa,UACb,IAAI6G,EAAO,CACTC,YAAa,EACbC,eAAgB,CAAC,gBACjBC,gBAAiB,CAAC,gBAGpB,IACEhM,QAAQC,IAAI,kCAAmCwG,GAC/C,MAAMtC,QAAgBC,EAAAA,EAAAA,MAEhBC,EAAYA,CAACK,EAAKuH,EAAQC,IACvB,IAAI5H,SAAQ,CAACC,EAASC,KAC3BL,EAAQM,qBAAqBC,EAAK,CAChCC,OAAQsH,EACRlI,SAAO8C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACF9C,GAAO,IACV,eAAgB,qBAElBvE,KAAMsH,KAAKC,UAAUmF,GACrBhL,KAAM,OACN0D,WAAaC,IACX7E,QAAQC,IAAI,qBAAsB4E,GAClCN,EAAQM,EAAS,EAEnBC,UAAYC,IACV/E,QAAQ+E,MAAM,kBAAmBA,GACjCP,EAAOO,EAAM,GAEf,IAIAF,QAAiBR,EAAUW,EAAW,OAAQ6G,GACpD7L,QAAQC,IAAI,0CAA2C4E,GACvD,MAAM,OAAE+D,GAAW/D,EAEnB,GAAI+D,EAAQ,CACV,IAAIuD,EAAStH,EAAS+D,OACnBZ,QACEY,IACkB,iBAAhBA,EAAO1H,MACU,iBAAhB0H,EAAO1H,OACT0H,EAAO/H,KAAO4F,IAEjB3D,KAAK8F,IAAM,CACV/H,GAAI+H,EAAO/H,GACXK,KAAM0H,EAAO1H,KACbuJ,KAAM7B,EAAOhD,MACb/F,MAAO+I,EAAO/I,UA2BlB,OAvBIsM,EAAOvJ,OAAS,SAEZ0B,QAAQoF,IACZyC,EAAOrJ,KAAIe,UACT,GAAkC,aAA9BuI,EAAMvM,MAAMwM,cAA8B,CAC5C,IAAIC,EAAU,6GAAArH,OAAgHmH,EAAMvL,GAAE,6CACtI,MAAMkI,QAAsB1E,EAAUiI,EAAY,MAAO,IACzDtM,QAAQC,IAAI,kBAAmB8I,GAE/B,MAAMwD,EAAWxD,EAAcH,OAAO4D,SAAS5D,IAAY,IAAD6D,EACxD,OAAmC,QAAnCA,EAAI7D,EAAOoB,gCAAwB,IAAAyC,GAA/BA,EAAiC7D,OAC5BA,EAAOoB,yBAAyBpB,OAAO9F,KAC3C4J,GAAmBA,EAAevC,UAGhC,EAAE,IAEXiC,EAAMO,QAAUJ,CAClB,MAKC,CACLnB,SAAS,EACT5L,KAAM2M,EAEV,CACF,CAAE,MAAOpH,GAEP,OADA/E,QAAQ+E,MAAM,uBAAwBA,GAC/B,CAAEqG,SAAS,EAAO5L,KAAM,GAAIuF,QACrC,GHamC6H,CACzB7I,EACA0C,GAIJzG,QAAQC,IAAI,cAAeiB,GAC3BlB,QAAQC,IAAI,qCAAsC2L,GAC9CA,EAAmBR,SACrBpF,GAAS6G,EAAAA,EAAAA,IAAmBjB,EAAmBpM,OAGjD,MAAMsN,OIjHgBjJ,OAAOE,EAASiD,EAAUnH,KACtD,IAAIkN,GAAY,EACZC,EAAuB,GAC3B,MAAMC,EACJ,2GAEF,IAAIpB,EAAO,CACTqB,SAAU,+CACVC,UAAW,CAAC,wBACZC,kBAAkB,EAClBC,kBAAkB,EAClBC,sBAAsB,EACtBC,kBAAmB,CAAC,cAAe,YAAa,mBAChDC,MAAO,mCACPC,KAAM,KACNC,WAAW,GAITC,EAAK,CACPT,SAAU,+CACVU,aAAc,oBACdJ,MAAO,mCACPK,IAAK,CAAC7G,IAGR,IACEhH,QAAQC,IAAI,+BAAgC+G,GAE5C,MAAM7C,QAAgBC,EAAAA,EAAAA,MAEhBS,QAAiB,IAAIP,SAAQ,CAACC,EAASC,KAC3CL,EAAQM,qBAAqBwI,EAAc,CACzCtI,OAAQ,OACRZ,SAAO8C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACF9C,GAAO,IACV,eAAgB,qBAElBvE,KAAMsH,KAAKC,UAAU8E,GACrB3K,KAAM,OACN0D,WAAYL,EACZO,UAAWN,GACX,IAKJ,GAFAxE,QAAQC,IAAI,0CAA2C4E,GAE/B,OAApBA,EAASiJ,OAAiB,CAC5B,MAAMC,QAAkB,IAAIzJ,SAAQ,CAACC,EAASC,KAC5CL,EAAQM,qBA/BZ,yGA+BuC,CACjCE,OAAQ,OACRZ,SAAO8C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACF9C,GAAO,IACV,eAAgB,qBAElBvE,KAAMsH,KAAKC,UAAU4G,GACrBzM,KAAM,OACN0D,WAAYL,EACZO,UAAWN,GACX,IAGJxE,QAAQC,IAAI,0CAA2C8N,GACnDA,EAAUC,kBAAkBC,4BACxB3J,QAAQoF,IACZqE,EAAUC,kBAAkBC,qBAAqBnL,KAAIe,UAGnD,GAAe,aAFAqK,EAAI,eAAelD,MAAM,IAEb,CACzB,IAAImD,EAAI,oGAAAlJ,OAAuGiJ,EAAIrN,GAAE,qCAErH,MAAMuN,QAAkB,IAAI9J,SAAQ,CAACC,EAASC,KAC5CL,EAAQM,qBAAqB0J,EAAM,CACjCxJ,OAAQ,MACRZ,UACA7C,KAAM,OACN0D,WAAYL,EACZO,UAAWN,GACX,IAGA6J,MAAMC,QAAQF,EAAUG,kBAC1BH,EAAUG,gBAAgBlH,SAASmH,IACjCxB,EAAqBtH,KAAK,CACxBN,WAAYoJ,EAAeC,MAAMrJ,WACjCsJ,OAAQF,EAAeG,MAAM,GAAGC,MAChC,IAKJ7B,EAD0B,aAAxBlN,EAAMwM,eACIW,EAAqBxD,MAC9BgF,GACCA,EAAepJ,aAAe4B,GACJ,WAA1BwH,EAAeE,QAKvB,KAIR,MACE1O,QAAQ+E,MAAM,wBAKhB,OAHA/E,QAAQC,IAAI,6BACZD,QAAQC,IAAI,sBAAuB8M,GAE5B,CACL3B,SAAS,EACT5L,KAAMuN,EACNwB,gBAAiBvB,EAErB,CAAE,MAAOjI,GAQP,MAPA/E,QAAQ+E,MAAM,kBAAmB,CAC/BL,IAAKuI,EACLlJ,UACA8H,OACA9G,UAGIA,CACR,GJViC8J,CAAe9K,EAAS0C,EAAU5G,GAY7D,OAXAG,QAAQC,IAAI,kCAAmC6M,GAC3CA,EAAa1B,UACfpF,GAAS8I,EAAAA,EAAAA,IAAUhC,EAAatN,OAChCwG,GAAS+I,EAAAA,EAAAA,IAAmBjC,EAAayB,wBAM3CvO,QAAQC,IAAI,wDAGd,CACE8F,EAAeiJ,EAAAA,GAEnB,CAAE,MAAOjK,GAGP,MAFA/E,QAAQ+E,MAAM,4BAA6BA,GAC3CiB,GAASU,EAAAA,EAAAA,KAAwB,IAC3B3B,CACR,CAAC,QACCiB,GAASU,EAAAA,EAAAA,KAAwB,GACnC,GAG8B,C,gDKzI3B,MAAMC,EAAiB9C,UAC5B,IACE,MAAMM,QAAgBC,EAAAA,EAAAA,MACtBpE,QAAQC,IAAI,uBAAwBkG,GACpC,MAAM8I,EAAUC,6GAEVrK,QAAiB,IAAIP,SAAQ,CAACC,EAASC,KAC3CL,EAAQM,qBAAqBwK,EAAS,CACpCtK,OAAQ,MACRzD,KAAM,OACN0D,WAAYL,EACZO,UAAWN,GACX,IAGE2K,EAAYtK,EAASuK,KAAK3E,KAC1B4E,EAAYxK,EAASuK,KAAK1E,MAC1B4E,EAAwB,kBACxBC,EAAuBpJ,EAM7B,MAJgB,CACd,CAACgJ,GAAYE,EACb,CAACC,GAAwBC,EAG7B,CAAE,MAAOxK,GAEP,YADA/E,QAAQ+E,MAAM,gCAAiCA,EAEjD,E","sources":["components/Popup/Popup.jsx","services/api/PlantAssignment/userGroupService.js","services/api/PlantAssignment/searchCAService.js","hooks/usePlantAssignment.js","services/api/PlantAssignment/allPlantSevice.js","services/api/PlantAssignment/assignedPlantService.js","services/api/PlantAssignment/plantChildrenService.js","services/api/PlantAssignment/CADetailService.js","services/api/PlantAssignment/fetchCsrfService.js"],"sourcesContent":["import React, { useState, useMemo, useEffect } from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  flexRender,\r\n} from \"@tanstack/react-table\";\r\nimport \"./Popup.css\";\r\nimport {\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_EMPTYADD_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport useToast from \"../../hooks/useToast\";\r\nconst Popup = ({ data, columns, buttonText, addedItem, CAName, state }) => {\r\n  const { showWarningToast } = useToast();\r\n  console.log(\"[Popup] Data Received: \", data);\r\n  const [uniqueTableData, setUniqueTableData] = useState(data);\r\n  const [show, setShow] = useState(false);\r\n  const [rowSelection, setRowSelection] = useState({});\r\n\r\n  useEffect(() => {\r\n    setUniqueTableData(data);\r\n  }, [data]);\r\n\r\n  const handleClose = () => setShow(false);\r\n\r\n  const handleShow = () => {\r\n    if (CAName) {\r\n      setShow(true);\r\n    } else if (state === \"RELEASED\") {\r\n      // alert(\r\n      //   \"Change Action is required to assign plants to Product, please assign Modify change Action and try again\"\r\n      // );\r\n      showWarningToast(MSG_ADDPRODUCT_RELEASED_ERROR);\r\n    } else {\r\n      // alert(\r\n      //   \"Change Action is required to assign plants to Product, please assign change Action and try again\"\r\n      // );\r\n      showWarningToast(MSG_ADDPRODUCT_NOT_ALLOWED_ERROR);\r\n    }\r\n  };\r\n\r\n  const addPlant = () => {\r\n    // Some Logic\r\n    const selectedRows = table.getSelectedRowModel().rows;\r\n    const selectedItem = selectedRows.map(\r\n      (item) => item.original[\"Available Plant\"]\r\n    );\r\n    console.log(\"[selected Item]\", selectedItem);\r\n    // need to add a condition for the no of selected items\r\n    if (selectedItem.length === 0) {\r\n      // alert(\"Please select any of the Plant\");\r\n      showWarningToast(MSG_EMPTYADD_ERROR);\r\n    } else {\r\n      // console.log(\"dfhgfd\", selectedRows);\r\n      // const updatedTableData = uniqueTableData.filter(\r\n      //   (row) =>\r\n      //     !selectedRows.find(\r\n      //       (selectedRow) =>\r\n      //         selectedRow.original[\"Available Plant\"] === row[\"Available Plant\"]\r\n      //     )\r\n      // );\r\n      // console.log(updatedTableData);\r\n      // setUniqueTableData(updatedTableData);\r\n      // console.log(\"bjdbjd\", uniqueTableData);\r\n      setRowSelection({}); // Reset row selection after removal\r\n      addedItem(selectedItem);\r\n      handleClose();\r\n    }\r\n  };\r\n\r\n  // Enhance columns with selection\r\n  const enhancedColumns = useMemo(() => {\r\n    const selectionColumn = {\r\n      id: \"select\",\r\n      cell: ({ row }) => (\r\n        <input\r\n          type=\"checkbox\"\r\n          className=\"form-check-input\"\r\n          checked={row.getIsSelected()}\r\n          onChange={row.getToggleSelectedHandler()}\r\n        />\r\n      ),\r\n    };\r\n\r\n    return [selectionColumn, ...columns];\r\n  }, [columns]);\r\n\r\n  const table = useReactTable({\r\n    data: uniqueTableData,\r\n    columns: enhancedColumns,\r\n    state: {\r\n      rowSelection,\r\n    },\r\n    enableRowSelection: true,\r\n    onRowSelectionChange: setRowSelection,\r\n    getCoreRowModel: getCoreRowModel(),\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn btn-outline-primary btn-lg m-2\"\r\n        onClick={handleShow}\r\n      >\r\n        {buttonText}\r\n      </button>\r\n\r\n      {show && (\r\n        <>\r\n          <div className=\"modal d-block\" tabIndex=\"-1\">\r\n            <div\r\n              className=\"modal-dialog modal-dialog-centered\"\r\n              style={{ maxWidth: \"500px\" }}\r\n            >\r\n              <div className=\"modal-content  container\">\r\n                <div className=\"modal-header\">\r\n                  <h5 className=\"me-5 popup-title\">{columns[0].header}</h5>\r\n\r\n                  <div>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn btn-outline-primary me-3\"\r\n                      onClick={() =>\r\n                        table.getToggleAllRowsSelectedHandler()({\r\n                          target: { checked: true },\r\n                        })\r\n                      }\r\n                    >\r\n                      Select All\r\n                    </button>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn btn-outline-secondary\"\r\n                      onClick={() =>\r\n                        table.getToggleAllRowsSelectedHandler()({\r\n                          target: { checked: false },\r\n                        })\r\n                      }\r\n                    >\r\n                      Deselect All\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n                <div className=\"modal-body p-0\">\r\n                  {table.getRowModel().rows.length > 0 ? (\r\n                    <div\r\n                      className=\"overflow-auto\"\r\n                      style={{ maxHeight: \"60vh\" }}\r\n                    >\r\n                      {table.getRowModel().rows.map((row) => (\r\n                        <div\r\n                          key={row.id}\r\n                          className=\"p-3 border-bottom d-flex align-items-center\"\r\n                          style={{\r\n                            backgroundColor: row.getIsSelected()\r\n                              ? \"#d5e8f2\"\r\n                              : \"inherit\",\r\n                          }}\r\n                        >\r\n                          <div className=\"me-3\">\r\n                            {flexRender(\r\n                              row.getVisibleCells()[0].column.columnDef.cell,\r\n                              row.getVisibleCells()[0].getContext()\r\n                            )}\r\n                          </div>\r\n                          <div>{row.original[columns[0].accessorKey]}</div>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  ) : (\r\n                    <p className=\"text-muted p-3\">No data available</p>\r\n                  )}\r\n                </div>\r\n                <div\r\n                  className=\"modal-footer d-flex justify-content-end\"\r\n                  style={{ backgroundColor: \"#f1f1f1\" }}\r\n                >\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-secondary me-2\"\r\n                    onClick={handleClose}\r\n                  >\r\n                    Close\r\n                  </button>\r\n                  <button\r\n                    onClick={addPlant}\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary\"\r\n                  >\r\n                    Add\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"modal-backdrop fade show\"></div>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Popup;\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getUserGroupCollab = async (headers, objectId, email) => {\r\n  try {\r\n    console.log(\"[UserGroup Status] ProductId: \", objectId);\r\n    const WAFData = await loadWAFData();\r\n    let urlObjWAF =\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/sharing/getSharing\";\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(urlObjWAF, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify({ data: [{ objectID: objectId }] }),\r\n        // data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let userGroup = [];\r\n\r\n    let userGroupBody = { groups: [] };\r\n    if (response) {\r\n      response.results.forEach((result) => {\r\n        result.sharings.userGroups.forEach((group) => {\r\n          // Check if the access is \"Can Edit\"\r\n          if (group.access === \"Can Edit\") {\r\n            userGroupBody.groups.push({\r\n              uri: group.userGroupID.replace(/[<>]/g, \"\"),\r\n            });\r\n          }\r\n        });\r\n      });\r\n      if (userGroupBody.groups.length > 0) {\r\n        let grpUrl =\r\n          \"https://oi000186152-us1-usersgroup.3dexperience.3ds.com/3drdfpersist/resources/v1/usersgroup/groups?select=uri,members,title\";\r\n        const grpresponse = await new Promise((resolve, reject) => {\r\n          WAFData.authenticatedRequest(grpUrl, {\r\n            method: \"POST\",\r\n            headers: {\r\n              // ...headers,\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            data: JSON.stringify(userGroupBody),\r\n            type: \"json\",\r\n            onComplete: resolve,\r\n            onFailure: reject,\r\n          });\r\n        });\r\n        console.log(\"Group Response is:\", grpresponse);\r\n        //   const Email = \"test\"; //Logged in person mail need to change and get dynamically\r\n        if (grpresponse) {\r\n          userGroup = grpresponse.groups\r\n            .filter((group) => group.members.includes(email))\r\n            .map((group) => group.title);\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log(\"[UserGroup Status] User Groups:\", userGroup);\r\n    // Return the user groups\r\n    return userGroup;\r\n  } catch (error) {\r\n    console.error(\"[UserGroup Status] Error occurred:\", error);\r\n    throw error; // Rethrow the error to handle it in the calling function\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const SearchCA = async (flowDownCA, headers) => {\r\n  let CADetails = { CAAtt: [] };\r\n  console.log(\"We are into Search CA Details\");\r\n\r\n  try {\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    // 1st API call to search for the Change Action\r\n    let urlObjWAF = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/changeaction/search?$searchStr=name:${flowDownCA}`;\r\n    const searchResponse = await fetchData(urlObjWAF);\r\n    const caID = searchResponse.changeAction[0]?.identifier;\r\n\r\n    console.log(\"Response From 1st Call\", caID);\r\n\r\n    if (caID) {\r\n      // 2nd API call to fetch Change Action details\r\n      const CAUrl = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/changeaction/${caID}?$fields=proposedChanges,flowDown`;\r\n      const CAresponse = await fetchData(CAUrl);\r\n\r\n      console.log(\"Response From 2nd Call\", CAresponse);\r\n\r\n      if (CAresponse) {\r\n        // Use for...of for async handling in loop\r\n        for (const item of CAresponse.isFlowDownOf || []) {\r\n          if (item.type === \"Change Action\") {\r\n            const parentCAUrl = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/changeaction/${item.identifier}?$fields=proposedChanges,flowDown`;\r\n\r\n            try {\r\n              // 3rd API call to fetch Parent Change Action details\r\n              const parentCAResponse = await fetchData(parentCAUrl);\r\n\r\n              console.log(\"Response From 3rd Call\", parentCAResponse);\r\n\r\n              if (parentCAResponse) {\r\n                CADetails.CAAtt.push({\r\n                  CATitle: parentCAResponse.title,\r\n                  CAState: parentCAResponse.state,\r\n                });\r\n              }\r\n            } catch (error) {\r\n              console.error(\"Error fetching parent CA data:\", error);\r\n            }\r\n          }\r\n        }\r\n\r\n        CADetails[\"MCOState\"] = CAresponse.state;\r\n        CADetails[\"MCOTitle\"] = CAresponse.title;\r\n      }\r\n    }\r\n\r\n    console.log(\"Final CA Details\", CADetails);\r\n    return CADetails;\r\n  } catch (error) {\r\n    console.error(\"Error in SearchCA:\", error);\r\n    throw error;\r\n  }\r\n};\r\n","import { useDispatch } from \"react-redux\";\r\n\r\nimport { getUserGroupCollab } from \"../services/api/PlantAssignment/userGroupService\";\r\nimport { getAllPlants } from \"../services/api/PlantAssignment/allPlantSevice\";\r\n\r\nimport { fetchProductChildren } from \"../services/api/PlantAssignment/plantChildrenService\";\r\nimport { fetchCADetails } from \"../services/api/PlantAssignment/CADetailService\";\r\nimport { fetchAssignedPlants } from \"../services/api/PlantAssignment/assignedPlantService\";\r\n\r\nimport {\r\n  setCAName,\r\n  setHeaders,\r\n  setParentDetailsLoading,\r\n  setPlantObjectData,\r\n  setProductChildren,\r\n  setProposedChanges,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { useState } from \"react\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nconst usePlantAssignment = () => {\r\n  const { showErrorToast } = useToast();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  // HERE IS THE iSSUE THAT THIS FUNCTION IS ALWAYS CALLED .\r\n  let email = \"\";\r\n  let securityContext1 = \"\";\r\n  initWidget((widget) => {\r\n    securityContext1 = widget.getValue(\"Credentials\");\r\n    email = widget.getValue(\"email\");\r\n  });\r\n\r\n  console.log(\"Email in usePlantAssignment:\", email);\r\n  console.log(\"Security Context in usePlantAssignment:\", securityContext1);\r\n  // const securityContext1 = initWidget.getValue(\"Credentials\");\r\n  // console.log(\"Srcurity Context in usePlantAssignment:\", securityContext1);\r\n\r\n  const handlePlantAssignment = async (collabSpace, state, objectId, type) => {\r\n    try {\r\n      dispatch(setParentDetailsLoading(true));\r\n      const headers = await fetchCsrfToken(securityContext1);\r\n      // Step 1: Call Initial Service\r\n      if (headers) {\r\n        console.log(\"[UsePlantAssignment] Headers are\", headers);\r\n        const userGroupCollab = await getUserGroupCollab(\r\n          headers,\r\n          objectId,\r\n          email\r\n        );\r\n        console.log(\"[Plant Assignment] User Groups:\", userGroupCollab);\r\n\r\n        let allCollabSpaces = [...userGroupCollab, collabSpace];\r\n\r\n        console.log(\r\n          \"[Use Plant Assignment] All CollabSpaces:\",\r\n          allCollabSpaces\r\n        );\r\n\r\n        // Step 3: Pass Combined Data to Additional Service\r\n        if (allCollabSpaces) {\r\n          const allPlants = await getAllPlants(\r\n            allCollabSpaces,\r\n            headers,\r\n            objectId\r\n          );\r\n          console.log(\"[Use Plant Assignment] All Plants are:\", allPlants);\r\n\r\n          if (allPlants) {\r\n            const plants = await fetchAssignedPlants(\r\n              allPlants,\r\n              headers,\r\n              objectId\r\n            );\r\n\r\n            console.log(\"[Use Plant Assignment]: \", plants);\r\n\r\n            // to dispatch the plants\r\n            if (plants.success) {\r\n              dispatch(setPlantObjectData(plants.data.plantData));\r\n              dispatch(setHeaders(headers));\r\n            } else {\r\n              console.error(\"Failed to fetch plant data\");\r\n            }\r\n          } else {\r\n            console.warn(\"[Use All Plants] There are no Plants\");\r\n          }\r\n        } else {\r\n          console.warn(\"[Use All Plants] There are no CollabSpace\");\r\n        }\r\n\r\n        // Step 4: Call Remaining Independent Services\r\n        let getProductChildren = {};\r\n        console.log(\"Type Before:\", type);\r\n        if (type === \"Raw_Material\") {\r\n          getProductChildren = {\r\n            success: true,\r\n            data: [],\r\n          };\r\n        } else {\r\n          getProductChildren = await fetchProductChildren(\r\n            headers,\r\n            objectId,\r\n            type\r\n          ); // type we need here\r\n        }\r\n        console.log(\"Type After:\", type);\r\n        console.log(\"[Use All Plants] Product Childrens\", getProductChildren);\r\n        if (getProductChildren.success) {\r\n          dispatch(setProductChildren(getProductChildren.data));\r\n        }\r\n\r\n        const getCaDetails = await fetchCADetails(headers, objectId, state);\r\n        console.log(\"[Use All Plants] Get CA Details\", getCaDetails);\r\n        if (getCaDetails.success) {\r\n          dispatch(setCAName(getCaDetails.data));\r\n          dispatch(setProposedChanges(getCaDetails.proposedChanges));\r\n        }\r\n\r\n        // Step 5: Dispatch Results to Redux\r\n\r\n        // hERE WE CAN ADD TOAST\r\n        console.log(\"[Plant Assignment] All Services Executed Successfully\");\r\n\r\n        return;\r\n      } else {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[Plant Assignment] Error:\", error);\r\n      dispatch(setParentDetailsLoading(false));\r\n      throw error; // Let the caller handle the error\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // End loading at the top level\r\n    }\r\n  };\r\n\r\n  return { handlePlantAssignment };\r\n};\r\n\r\nexport default usePlantAssignment;\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getAllPlants = async (allCollabSpaces, headers, objectId) => {\r\n  try {\r\n    let UserGroupClasses = [];\r\n    console.log(\"[All Plant Service] CollabSpaces: \", allCollabSpaces);\r\n    console.log(\"[All Plant Service] headers: \", headers);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    // Iterate through all collab spaces and fetch data for each\r\n    const plantDataPromises = allCollabSpaces.map(async (collabSpace) => {\r\n      try {\r\n        const collabspaceURL = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslib/dslib:Library/search?$searchStr=${collabSpace}`;\r\n\r\n        const collabspaceResponse = await fetchData(collabspaceURL);\r\n        const libraryId = collabspaceResponse.member?.find(\r\n          (item) => item.title === collabSpace\r\n        )?.id;\r\n\r\n        console.log(\"[All Plant Service] Library id is:\", libraryId);\r\n\r\n        if (libraryId) {\r\n          const libraryDataURL = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslib/dslib:Library/${libraryId}?$mask=dslib:ExpandClassifiableClassesMask`;\r\n\r\n          const classResponse = await fetchData(libraryDataURL);\r\n\r\n          const { member } = classResponse;\r\n\r\n          if (member && member.length > 0) {\r\n            console.log(\"[Library Data Service] Member found:\", member);\r\n\r\n            const factoriesData = member[0]?.ChildClasses;\r\n\r\n            if (factoriesData?.member?.length > 0) {\r\n              const plantsData = factoriesData.member[0].ChildClasses?.member;\r\n\r\n              if (plantsData && plantsData.length > 0) {\r\n                // Filter out duplicates based on `id` (or any unique property)\r\n                const uniquePlantsData = plantsData.filter(\r\n                  (plant) =>\r\n                    !UserGroupClasses.some(\r\n                      (userClass) => userClass.id === plant.id\r\n                    )\r\n                );\r\n\r\n                // Add only unique items from plantsData to UserGroupClasses\r\n                UserGroupClasses = [...UserGroupClasses, ...uniquePlantsData];\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error processing group:\", collabSpace, error);\r\n        throw error; // Throw the error to be handled by Promise.all\r\n      }\r\n    });\r\n\r\n    await Promise.all(plantDataPromises); // Wait for all promises to resolve\r\n    return UserGroupClasses; // Return the updated UserGroupClasses\r\n  } catch (error) {\r\n    console.error(\"[All Plant Service] Error occurred:\", error);\r\n    throw error; // Re-throw the error for upstream handling\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nimport { SearchCA } from \"./searchCAService\";\r\n\r\nexport const fetchAssignedPlants = async (\r\n  allPlants,\r\n  headers,\r\n  objectId // ProductId\r\n) => {\r\n  try {\r\n    console.log(\"[Assigned Plant Service] Plant Members:\", allPlants);\r\n\r\n    const libraryDataURL = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslib/dslib:ClassifiedItem/${objectId}?$mask=dslib:ClassificationAttributesMask`;\r\n\r\n    const WAFData = await loadWAFData();\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(libraryDataURL, {\r\n        method: \"GET\",\r\n        headers,\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let initialAssignedClasses = [];\r\n    let uniqueInAllclasses = [];\r\n\r\n    // Getting ClassMembers\r\n    let ClassExtensions = response.member[0].ClassificationAttributes.member;\r\n\r\n    // Process ClassExtensions and wait for promises to resolve\r\n    await Promise.all(\r\n      ClassExtensions.map(async (classItem) => {\r\n        console.log(\"Class Item is \", classItem);\r\n        for (let parentClass of allPlants) {\r\n          if (classItem.ClassID === parentClass.id) {\r\n            let PlantName = parentClass.title;\r\n            PlantName = PlantName.replace(\"Plant\", \"\").replace(/\\s+/g, \"\");\r\n            let obj = { id: classItem.ClassID, title: parentClass.title };\r\n\r\n            const promiseArray = classItem.Attributes.map((eachAttribute) => {\r\n              if (\r\n                eachAttribute.name.includes(\"FlowDownCA\") &&\r\n                eachAttribute.value\r\n              ) {\r\n                return SearchCA(eachAttribute.value, headers).then(\r\n                  (flowDownCADetails) => {\r\n                    if (flowDownCADetails) {\r\n                      console.log(flowDownCADetails);\r\n                      obj[\"MFGChange\"] = flowDownCADetails?.MCOTitle;\r\n                      obj[\"MFGStatus\"] = flowDownCADetails?.MCOState;\r\n\r\n                      let CATitle = \"\",\r\n                        CAState = \"\";\r\n\r\n                      flowDownCADetails.CAAtt.forEach((CA) => {\r\n                        CATitle += \",\" + CA.CATitle;\r\n                        CAState += \",\" + CA.CAState;\r\n                      });\r\n\r\n                      obj[\"Change\"] = CATitle.slice(1); // Remove leading comma\r\n                      obj[\"ChangeStatus\"] = CAState.slice(1); // Remove leading comma\r\n                    }\r\n                  }\r\n                );\r\n              } else {\r\n                // Handle non-async attributes\r\n                obj[eachAttribute.name.replace(PlantName, \"\").trim()] =\r\n                  eachAttribute.value;\r\n                return Promise.resolve(); // Create a resolved Promise for consistency\r\n              }\r\n            });\r\n\r\n            // Wait for all promises to complete\r\n            await Promise.all(promiseArray);\r\n            initialAssignedClasses = [...initialAssignedClasses, obj];\r\n            console.log(\"Initial Assigned Classes\", initialAssignedClasses);\r\n            console.log(\"Processed Object:\", obj);\r\n          }\r\n        }\r\n      })\r\n    );\r\n\r\n    console.log(\r\n      \"[Assigned Plant Service] Initial Assigned Classes:\",\r\n      initialAssignedClasses\r\n    );\r\n    uniqueInAllclasses = allPlants.filter(\r\n      (allClass) =>\r\n        !initialAssignedClasses.some((assigned) => assigned.id === allClass.id)\r\n    );\r\n    console.log(\"uniqueInAllclasses--:\", uniqueInAllclasses);\r\n\r\n    // Dispatch only after the classes are fully populated\r\n\r\n    return {\r\n      success: true,\r\n      data: {\r\n        plantData: {\r\n          allPlants: allPlants,\r\n          initialAssignedPlants: initialAssignedClasses,\r\n          uniquePlants: uniqueInAllclasses,\r\n        },\r\n      },\r\n    };\r\n  } catch (error) {\r\n    console.error(\"[Object Details] Failed to fetch data:\", error);\r\n    return { success: false, error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchProductChildren = async (headers, objectId, type) => {\r\n  let urlObjWAF =\r\n    \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dseng/dseng:EngItem/\";\r\n  urlObjWAF += objectId;\r\n  urlObjWAF += \"/expand\";\r\n  let body = {\r\n    expandDepth: 1,\r\n    type_filter_bo: [\"VPMReference\"],\r\n    type_filter_rel: [\"VPMInstance\"],\r\n  };\r\n\r\n  try {\r\n    console.log(\"[SearchCAService] ProductId is:\", objectId);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = (url, Method, classifyBody) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: Method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(classifyBody),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    const response = await fetchData(urlObjWAF, \"POST\", body);\r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n    const { member } = response;\r\n\r\n    if (member) {\r\n      let childs = response.member\r\n        .filter(\r\n          (member) =>\r\n            (member.type === \"VPMReference\" ||\r\n              member.type === \"Raw_Material\") &&\r\n            member.id !== objectId\r\n        )\r\n        .map((member) => ({\r\n          id: member.id,\r\n          type: member.type,\r\n          name: member.title,\r\n          state: member.state,\r\n        }));\r\n\r\n      // If there are child items, we need to fetch classification data\r\n      if (childs.length > 0) {\r\n        // Use Promise.all to handle multiple async operations\r\n        await Promise.all(\r\n          childs.map(async (child) => {\r\n            if (child.state.toLowerCase() === \"released\") {\r\n              let classesurl = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslib/dslib:ClassifiedItem/${child.id}?$mask=dslib:ClassificationAttributesMask`;\r\n              const classResponse = await fetchData(classesurl, \"GET\", \"\");\r\n              console.log(\"classResponse->\", classResponse);\r\n\r\n              const classIds = classResponse.member.flatMap((member) => {\r\n                if (member.ClassificationAttributes?.member) {\r\n                  return member.ClassificationAttributes.member.map(\r\n                    (classification) => classification.ClassID\r\n                  );\r\n                }\r\n                return [];\r\n              });\r\n              child.classes = classIds; // Adding classes of released child\r\n            }\r\n          })\r\n        );\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        data: childs,\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error while Fetching\", error);\r\n    return { success: false, data: [], error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchCADetails = async (headers, objectID, state) => {\r\n  let resObejct = false;\r\n  let proposedChangesArray = [];\r\n  const URLCADetails =\r\n    \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/enorelnav/v2/navigate/setPreferences\";\r\n\r\n  let body = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    relations: [\"caproposedwhere_from\"],\r\n    allRelationsMode: false,\r\n    publicationsMode: false,\r\n    computeWithInstances: false,\r\n    attributesForView: [\"ds6w:status\", \"ds6w:type\", \"ds6w:identifier\"],\r\n    label: \"ENXENG_AP-e1331143-1734517777960\",\r\n    lang: \"en\",\r\n    ghostMode: false,\r\n  };\r\n  let url2 =\r\n    \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/enorelnav/v2/navigate/getEcosystem\";\r\n  let bd = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    responseMode: \"objectsByPatterns\",\r\n    label: \"ENXENG_AP-e1331143-1734517780491\",\r\n    ids: [objectID],\r\n  };\r\n\r\n  try {\r\n    console.log(\"[Get CA Details] Product ID:\", objectID);\r\n\r\n    const WAFData = await loadWAFData();\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(URLCADetails, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n\r\n    if (response.status === \"OK\") {\r\n      const response2 = await new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url2, {\r\n          method: \"POST\",\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(bd),\r\n          type: \"json\",\r\n          onComplete: resolve,\r\n          onFailure: reject,\r\n        });\r\n      });\r\n\r\n      console.log(\"[Get CA Details Service] Data received:\", response2);\r\n      if (response2.objectsByPatterns.caproposedwhere_from) {\r\n        await Promise.all(\r\n          response2.objectsByPatterns.caproposedwhere_from.map(async (itm) => {\r\n            const status = itm[\"ds6w:status\"].slice(14);\r\n\r\n            if (status !== \"Complete\") {\r\n              let url3 = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/changeaction/${itm.id}?$fields=proposedChanges,flowDown`;\r\n\r\n              const response3 = await new Promise((resolve, reject) => {\r\n                WAFData.authenticatedRequest(url3, {\r\n                  method: \"GET\",\r\n                  headers,\r\n                  type: \"json\",\r\n                  onComplete: resolve,\r\n                  onFailure: reject,\r\n                });\r\n              });\r\n\r\n              if (Array.isArray(response3.proposedChanges)) {\r\n                response3.proposedChanges.forEach((proposedChange) => {\r\n                  proposedChangesArray.push({\r\n                    identifier: proposedChange.where.identifier,\r\n                    action: proposedChange.whats[0].what,\r\n                  });\r\n                });\r\n              }\r\n\r\n              if (state.toLowerCase() === \"released\") {\r\n                resObejct = proposedChangesArray.some(\r\n                  (proposedChange) =>\r\n                    proposedChange.identifier === objectID &&\r\n                    proposedChange.action === \"Modify\"\r\n                );\r\n              } else {\r\n                resObejct = true;\r\n              }\r\n            }\r\n          })\r\n        );\r\n      }\r\n    } else {\r\n      console.error(\"Unable to Fetch the \");\r\n    }\r\n    console.log(\"Status is coming inside 7\");\r\n    console.log(\"Response Object is:\", resObejct);\r\n\r\n    return {\r\n      success: true,\r\n      data: resObejct,\r\n      proposedChanges: proposedChangesArray,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Failed Request:\", {\r\n      url: URLCADetails,\r\n      headers,\r\n      body,\r\n      error,\r\n    });\r\n\r\n    throw error;\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const fetchCsrfToken = async (securityContext1) => {\r\n  try {\r\n    const WAFData = await loadWAFData();\r\n    console.log(\"Security Context is:\", securityContext1);\r\n    const csrfURL = process.env.REACT_APP_CSRF_URL;\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(csrfURL, {\r\n        method: \"GET\",\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    const csrfToken = response.csrf.name;\r\n    const csrfValue = response.csrf.value;\r\n    const securityContextHeader = \"SecurityContext\";\r\n    const securityContextValue = securityContext1;\r\n\r\n    const headers = {\r\n      [csrfToken]: csrfValue,\r\n      [securityContextHeader]: securityContextValue,\r\n    };\r\n    return headers;\r\n  } catch (error) {\r\n    console.error(\"[CSRF] Failed to fetch token:\", error);\r\n    return; // Return empth so that the else block should execute.\r\n  }\r\n};\r\n"],"names":["_ref","data","columns","buttonText","addedItem","CAName","state","showWarningToast","useToast","console","log","uniqueTableData","setUniqueTableData","useState","show","setShow","rowSelection","setRowSelection","useEffect","handleClose","enhancedColumns","useMemo","id","cell","_ref2","row","_jsx","type","className","checked","getIsSelected","onChange","getToggleSelectedHandler","table","useReactTable","enableRowSelection","onRowSelectionChange","getCoreRowModel","_jsxs","_Fragment","children","onClick","handleShow","MSG_ADDPRODUCT_RELEASED_ERROR","MSG_ADDPRODUCT_NOT_ALLOWED_ERROR","tabIndex","style","maxWidth","header","getToggleAllRowsSelectedHandler","target","getRowModel","rows","length","maxHeight","map","backgroundColor","flexRender","getVisibleCells","column","columnDef","getContext","original","accessorKey","addPlant","selectedItem","getSelectedRowModel","item","MSG_EMPTYADD_ERROR","SearchCA","async","flowDownCA","headers","CADetails","CAAtt","_searchResponse$chang","WAFData","loadWAFData","fetchData","Promise","resolve","reject","authenticatedRequest","url","method","onComplete","response","onFailure","error","urlObjWAF","concat","caID","changeAction","identifier","CAUrl","CAresponse","isFlowDownOf","parentCAUrl","parentCAResponse","push","CATitle","title","CAState","usePlantAssignment","showErrorToast","dispatch","useDispatch","email","securityContext1","initWidget","widget","getValue","handlePlantAssignment","collabSpace","objectId","setParentDetailsLoading","fetchCsrfToken","userGroupCollab","_objectSpread","JSON","stringify","objectID","userGroup","userGroupBody","groups","results","forEach","result","sharings","userGroups","group","access","uri","userGroupID","replace","grpUrl","grpresponse","filter","members","includes","getUserGroupCollab","allCollabSpaces","allPlants","UserGroupClasses","plantDataPromises","_collabspaceResponse$","_collabspaceResponse$2","collabspaceURL","libraryId","member","find","libraryDataURL","classResponse","_member$","_factoriesData$member","factoriesData","ChildClasses","_factoriesData$member2","plantsData","uniquePlantsData","plant","some","userClass","all","getAllPlants","plants","initialAssignedClasses","uniqueInAllclasses","ClassExtensions","ClassificationAttributes","classItem","parentClass","ClassID","PlantName","obj","promiseArray","Attributes","eachAttribute","name","value","then","flowDownCADetails","MCOTitle","MCOState","CA","slice","trim","allClass","assigned","success","plantData","initialAssignedPlants","uniquePlants","fetchAssignedPlants","setPlantObjectData","setHeaders","warn","getProductChildren","body","expandDepth","type_filter_bo","type_filter_rel","Method","classifyBody","childs","child","toLowerCase","classesurl","classIds","flatMap","_member$Classificatio","classification","classes","fetchProductChildren","setProductChildren","getCaDetails","resObejct","proposedChangesArray","URLCADetails","widgetId","relations","allRelationsMode","publicationsMode","computeWithInstances","attributesForView","label","lang","ghostMode","bd","responseMode","ids","status","response2","objectsByPatterns","caproposedwhere_from","itm","url3","response3","Array","isArray","proposedChanges","proposedChange","where","action","whats","what","fetchCADetails","setCAName","setProposedChanges","MSG_FETCH_CSRF_HEADERS_FAILED","csrfURL","process","csrfToken","csrf","csrfValue","securityContextHeader","securityContextValue"],"sourceRoot":""}